=== 命令 ===

    * 内建命令/内部命令 builtin
        * I/O: echo printf read
        * 文件系统: cd pushd popd dirs
        * 变量: let eval set unset export declare typeset
            * readonly getopts
        * 脚本行为: source/. exit exec shopt caller
        * 命令: true false type hash hind help
        * 作业控制命令: jobs disown fg bg wait suspend logout
            * times kill killall command builtin enable autoload
    * 外部工具
        * 寻求帮组: --help man info
        * 时间日期: date zdump time cal sleep usleep hwclock
        * 文件目录: touch ls vdir cp mv rm mkdir rmdir ln readlink pwd
        * 权限管理: chown chmod chattr
        * 文件查找: which type file whatis whereis locate look find
        * 文本处理: cat tac head tail sort tsort uniq rev wc tr
            * expand unexpand cut paste join
            * fold fmt col column colrm nl pr
            * gettext msgfmt iconv recode tex gs enscript groff tbl eqn
            * lex(flex) yacc(bison)
            * strings diff diff3 sdiff cmp comm patch
            * grep sed awk
        * > >> < | xargs expr at batch
        * 归档工具: tar shar ar rpm cpio rpm2cpio gzip bzip2
            * compress uncompress sq zip unzip unarc unarj unrar
        * basename dirname
        * split csplit
        * sum cksum md5sum shalsum
        * shred
        * uuencode uudecode mimencode mmencode
        * crypt
        * mktemp make install dos2unix ptx more less
        * host ipcalc nslookup dig traceroute ping whois finger chfn vrfy

{{{
    which $cmdname
    whatis $cmdname
    whereis $cmdname
    type $cmdname
    locate $cmdname
    ll $cmdname
    file $patch/$cmdname
    pacman -Qo $patch/$cmdname
    pacman -Qi $pkgname
    pacman -Ql $pkgname
}}}

=== 例程 ===

{{{
    ps ax | grep firefox | grep -v grep | awk '{ print $1 }' | kill
    WORKDIR=`dirname $0`
}}}

=== Test ===
    # 什么时候不适合使用Shell编程
        * 资源密集型的任务, 尤其在需要考虑效率时(比如, 排序, hash等等).
        * 需要处理大任务的数学操作, 尤其是浮点运算, 精确运算, 或者复杂的算术运算(这种情况一般使用C++或FORTRAN来处理).
        * 有跨平台移植需求(一般使用C或Java).
        * 复杂的应用, 在必须使用结构化编程的时候(需要变量的类型检查, 函数原型, 等等).
        * 至关重要的应用, 比如说为了这个应用, 你需要赌上自己的农场, 甚至赌上你们公司的未来.
        * 对于安全有很高要求的任务, 比如你需要一个健壮的系统来防止入侵, 破解, 恶意破坏等等.
        * 工程的每个组成部分之间, 需要连锁的依赖性.
        * 需要大规模的文件操作(Bash受限于顺序地进行文件访问, 而且只能使用这种笨拙的效率低下的一行接一行的处理方式. ).
        * 需要多维数组的支持.
        * 需要数据结构的支持,比如链表或数组等数据结构.
        * 需要产生或操作图形化界面GUI.
        * 需要直接操作系统硬件.
        * 需要I/O或socket接口.
        * 需要使用库或者遗留下来的旧代码的接口.
        * 个人的, 闭源的应用(shell脚本把代码就放在文本文件中, 全世界都能看到).
    # 魔法数字 #! sha-bang
    # 特殊字符
        * # ; ;; . "" '' , \ / `` : ! * ? $ ${} $* $@ $? $$ () {} [] [[]] (())
        * > &> >& >> <> << <<< > < \< \> | >| || && & - = + % ~ ~+ =~ ^
    # readline
        * set -o
        * emacs || vi

=== 参考资料 ===
    * ABS-Guide
        * 官方 ||[http://tldp.org/LDP/abs/ TLDP]||[http://www.linuxsir.org/main/?q=node/140 Linuxsir]||
        * 在线 ||[http://footearthtest.googlecode.com/svn/www/ABS-Guide/3.9.1_cn/html/index.html 3.91中文版]||[http://footearthtest.googlecode.com/svn/www/ABS-Guide/6.1_en/index.html 6.1英文版]||

    * [http://docs.google.com/fileview?id=0BwS1282BBrHnNzQ3MzQ0NDMtYjM5Ny00ZTNkLWFhMDItYzY4N2I1OWNiYjFi&hl=zh_CN Unix Shell 编程（第三版）]

    * [http://docs.google.com/fileview?id=0BwS1282BBrHnNzQ3MzQ0NDMtYjM5Ny00ZTNkLWFhMDItYzY4N2I1OWNiYjFi&hl=zh_CN Unix Shell 编程 24学时教程]

    * [http://www.douban.com/subject/2144787/ UNIX shell 范例精解（第四版）]

    * [http://footearthtest.googlecode.com/svn/www/AIX/index.html AIX命令参考大全]
