=== 什么是Shell ===

    shell是一个命令解释器. 是介于操作系统内核与用户之间的一个绝缘层. 准确地说,它也是能力很强的计算机语言, 一种shell程序, 同时也被称为一种脚本语言. 它是非常容易使用的工具, 它可以通过将系统调用, 公共程序, 工具, 和编译过的二进制程序"粘合"在一起来建立应用. 事实上, 所有的UNIX命令和工具再加上公共程序, 对于shell脚本来说,都是可调用的. 如果这些你还觉得不够,那么shell内建命令, 比如条件测试与循环结构, 也会给脚本添加强力的支持和增加灵活性. Shell脚本对于管理系统任务和其它的重复工作的例程来说, 表现的非常好, 根本不需要那些华而不实的成熟紧凑的程序语言.

=== 为什么要使用Shell ===

    对于任何想适当精通一些系统管理知识的人来说, 掌握shell脚本知识都是最基本的, 即使这些人可能并不打算真正的编写一些脚本. 想一下Linux机器的启动过程, 在这个过程中, 必将运行/etc/rc.d目录下的脚本来存储系统配置和建立服务. 详细的理解这些启动脚本对于分析系统的行为是非常重要的, 并且有时候可能必须修改它.

    学习如何编写shell脚本并不是一件很困难的事, 因为脚本可以分为很小的块, 并且相对于shell特性的操作和选项 [1]部分,只需要学习很小的一部分就可以了. 语法是简单并且直观的, 编写脚本很像是在命令行上把一些相关命令和工具连接起来, 并且只有很少的一部分"规则"需要学习. 绝大部分脚本第一次就可以正常的工作, 而且即使调试一个长一些的脚本也是很直观的.

    一个shell脚本是一个类似于"小吃店的(quick and dirty)"方法, 在你使用原型设计一个复杂的应用的时候. 在工程开发的第一阶段, 即使从功能中取得很有限的一个子集放到shell脚本中来完成往往都是非常有用的. 使用这种方法, 程序的结果可以被测试和尝试运行, 并且在处理使用诸如C/C++, Java或者Perl语言编写的最终代码前, 主要的缺陷和陷阱往往就被发现了.

    Shell脚本遵循典型的UNIX哲学, 就是把大的复杂的工程分成小规模的子任务, 并且把这些部件和工具组合起来. 许多人认为这种办法更好一些, 至少这种办法比使用那种高\大\全的语言更美, 更愉悦, 更适合解决问题. 比如Perl就是这种能干任何事能适合任何人的语言, 但是代价就是你需要强迫自己使用这种语言来思考解决问题的办法.

=== 什么时候不适合使用Shell编程 ===

    * 资源密集型的任务, 尤其在需要考虑效率时(比如, 排序, hash等等).
    * 需要处理大任务的数学操作, 尤其是浮点运算, 精确运算, 或者复杂的算术运算(这种情况一般使用C++或FORTRAN来处理).
    * 有跨平台移植需求(一般使用C或Java).
    * 复杂的应用, 在必须使用结构化编程的时候(需要变量的类型检查, 函数原型, 等等).
    * 至关重要的应用, 比如说为了这个应用, 你需要赌上自己的农场, 甚至赌上你们公司的未来.
    * 对于安全有很高要求的任务, 比如你需要一个健壮的系统来防止入侵, 破解, 恶意破坏等等.
    * 工程的每个组成部分之间, 需要连锁的依赖性.
    * 需要大规模的文件操作(Bash受限于顺序地进行文件访问, 而且只能使用这种笨拙的效率低下的一行接一行的处理方式. ).
    * 需要多维数组的支持.
    * 需要数据结构的支持,比如链表或数组等数据结构.
    * 需要产生或操作图形化界面GUI.
    * 需要直接操作系统硬件.
    * 需要I/O或socket接口.
    * 需要使用库或者遗留下来的旧代码的接口.
    * 个人的, 闭源的应用(shell脚本把代码就放在文本文件中, 全世界都能看到).

=== 有哪些Shell ===

    sh bsh csh tcsh bash dash zsh ksh

{{{
    Unix - SYS V    - sh   --------------
         - FreeBSD  - csh  - ksh        |---bash
                           - tcsh   -----
}}}


=== 命令 ===

    * 内建命令/内部命令 builtin

        * I/O: echo printf read
        * 文件系统: cd pushd popd dirs
        * 变量: let eval set unset export declare typeset
            * readonly getopts
        * 脚本行为: source/. exit exec shopt caller
        * 命令: true false type hash hind help
        * 作业控制命令: jobs disown fg bg wait suspend logout
            * times kill killall command builtin enable autoload
    * 外部工具

        * 寻求帮组: --help man info
        * 时间日期: date zdump time cal sleep usleep hwclock
        * 文件目录: touch ls vdir cp mv rm mkdir rmdir ln readlink pwd
        * 权限管理: chown chmod chattr
        * 文件查找: which type file whatis whereis locate look find
        * 文本处理: cat tac head tail sort tsort uniq rev wc tr
            * expand unexpand cut paste join
            * fold fmt col column colrm nl pr
            * gettext msgfmt iconv recode tex gs enscript groff tbl eqn
            * lex(flex) yacc(bison)
            * strings diff diff3 sdiff cmp comm patch
            * grep sed awk
        * > >> < | xargs expr at batch
        * 归档工具: tar shar ar rpm cpio rpm2cpio gzip bzip2
            * compress uncompress sq zip unzip unarc unarj unrar
        * basename dirname
        * split csplit
        * sum cksum md5sum shalsum
        * shred
        * uuencode uudecode mimencode mmencode
        * crypt
        * mktemp make install dos2unix ptx more less
        * host ipcalc nslookup dig traceroute ping whois finger chfn vrfy

{{{
    which $cmdname
    whatis $cmdname
    whereis $cmdname
    type $cmdname
    locate $cmdname
    ll $cmdname
    file $patch/$cmdname
    pacman -Qo $patch/$cmdname
    pacman -Qi $pkgname
    pacman -Ql $pkgname
}}}

=== 例程 ===

{{{
    ps ax | grep firefox | grep -v grep | awk '{ print $1 }' | kill
    WORKDIR=`dirname $0`
}}}

=== Test ===

    # 魔法数字 #! sha-bang
    # 特殊字符
        * # ; ;; . "" '' , \ / `` : ! * ? $ ${} $* $@ $? $$ () {} [] [[]] (())
        * > &> >& >> <> << <<< > < \< \> | >| || && & - = + % ~ ~+ =~ ^
    # readline
        * set -o
        * emacs || vi

=== 参考资料 ===

    * ABS-Guide
        * 官方 ||[http://tldp.org/LDP/abs/ TLDP]||[http://www.linuxsir.org/main/?q=node/140 Linuxsir]||
        * 在线 ||[http://footearthtest.googlecode.com/svn/www/ABS-Guide/3.9.1_cn/html/index.html 3.91中文版]||[http://footearthtest.googlecode.com/svn/www/ABS-Guide/6.1_en/index.html 6.1英文版]||

    * [http://docs.google.com/fileview?id=0BwS1282BBrHnNzQ3MzQ0NDMtYjM5Ny00ZTNkLWFhMDItYzY4N2I1OWNiYjFi&hl=zh_CN Unix Shell 编程（第三版）]

    * [http://docs.google.com/fileview?id=0BwS1282BBrHnNzQ3MzQ0NDMtYjM5Ny00ZTNkLWFhMDItYzY4N2I1OWNiYjFi&hl=zh_CN Unix Shell 编程 24学时教程]

    * [http://www.douban.com/subject/2144787/ UNIX shell 范例精解（第四版）]

    * [http://footearthtest.googlecode.com/svn/www/AIX/index.html AIX命令参考大全]
