= WEB 前端技术 =

||w3cschool||

== XHTML ==

== CSS ==

    * 调用方式
        * 链接式
        * 导入式
        * 行内式
    * 选择器
        * 标记选择器
            * {{{tagname}}}
        * 类别选择器
            * {{{.classname}}}
        * ID 选择器
            * {{{#idname}}}
        * 复合选择器
            * “交集”选择器
            * “并集”选择器
                * 全局选择器
        * 全局选择器
            * {{{*}}}
        * 后代选择器
            * 使用空格分隔
        * 子选择器
            * 使用 {{{>}}} 分隔
            * IE6 不支持
    * 优先级
        # 行内样式
        # ID 样式
        # 类别样式
        # 标记样式
    * 盒子模型
        * padding-border-margin 模型
            * [http://footearthtest.googlecode.com/svn/update/pic/CSS-BOX.jpg]
        * border 边框
            * border-style
                * 各浏览器效果不同，不推荐使用
                * dashed dotted double groove
                * inset outset ridge solid
            * border-color border-width border-style
                * 2个属性值：上下-左右
                    * 前者表示上下边框的属性值
                    * 后者表示左右边框的属性值
                * 3个属性值：上-两边-下
                    * 前者表示上边框的属性值
                    * 中间表示左右边框的属性值
                    * 最后表示下边框的属性值
                * 4个属性值：上-右-下-左（顺时针）
                    * 第一个属性值表示上边（top）框的属性值
                    * 第二个属性值表示右边（right）框的属性值
                    * 第三个属性值表示下边（bottom）框的属性值
                    * 第四个属性值表示左边（left）框的属性值
            * 属性单独设置
                * {{{border: 2px green dashed;}}}
                * {{{border-left: 1px red solid;}}}
                * {{{border-left-color: red;}}}
        * 内边距 padding
        * 外边距 margin
        * 盒子之间的关系
            * HTML与DOM
            * 标准文档流
                * 块级元素（block level）
                    * body
                    * ul
                    * li
                * 行内元素（inline）
                    * strong
                    * a
                    * DOM 树中行内元素也视为一个节点
            * div 与 span
                * div 块与块之间换行
                * span 块与块之间没有换行，在同一行
            * 盒子在标准流中的定位原则
                * margin
                    * 水平方向盒子之间的距离
                        * span1 {{{|}}} margin-right {{{<--->|<--->}}} margin-left {{{|}}} span2
                    * 垂直方向盒子之间的距离
                        * div1
                        * {{{div1.margin-bottom>div2.margin-top?div1.margin-bottom;div2.margin-top>}}}
                        * div2
                        * margin 的“塌陷”现象
                    * 嵌套盒子之间的距离
                        * 子块 包含 子块的margin区 一起 等同于 父块的content
                    * 将 margin 设为负值

== {{{JavaScript}}} ==

    * 操作 DOM 树
        * 对象 方法 集合 事件 属性

=== EX ===

{{{
//String.prototype使用  
  
//批量替换，比如：str.ReplaceAll([/a/g,/b/g,/c/g],["aaa","bbb","ccc"])  
String.prototype.ReplaceAll=function (A,B) {  
    var C=this;  
    for(var i=0;i<A.length;i++) {  
        C=C.replace(A[i],B[i]);  
    };  
    return C;  
};  
  
// 去掉字符两端的空白字符  
String.prototype.Trim=function () {  
    return this.replace(/(^[\t\n\r]*)|([\t\n\r]*$)/g,'');  
};  
  
// 去掉字符左边的空白字符  
String.prototype.LTrim=function () {  
    return this.replace(/^[\t\n\r]/g,'');  
};  
  
// 去掉字符右边的空白字符  
String.prototype.RTrim=function () {  
    return this.replace(/[\t\n\r]*$/g,'');  
};  
  
// 返回字符的长度，一个中文算2个  
String.prototype.ChineseLength=function()  
{   
    return this.replace(/[^\x00-\xff]/g,"**").length;  
};  
  
// 判断字符串是否以指定的字符串结束  
String.prototype.EndsWith=function (A,B) {  
    var C=this.length;  
    var D=A.length;  
    if(D>C)return false;  
    if(B) {  
        var E=new RegExp(A+'$','i');  
        return E.test(this);  
    }else return (D==0||this.substr(C-D,D)==A);  
};  
// 判断字符串是否以指定的字符串开始  
String.prototype.StartsWith = function(str)   
{  
    return this.substr(0, str.length) == str;  
};  
// 字符串从哪开始多长字符去掉  
String.prototype.Remove=function (A,B) {  
    var s='';  
    if(A>0)s=this.substring(0,A);  
    if(A+B<this.length)s+=this.substring(A+B,this.length);  
    return s;  
};  
}}}

=== {{{JavaScript}}} 库 ===

    * [http://prototypejs.org/ Prototype] [http://api.prototypejs.org/ API DOC]
    * JQuery
    * Dojo
    * ExtJS

    * [http://www.ruanyifeng.com/blog/2009/08/learning_javascript_closures.html|学习Javascript闭包（Closure）]
    * [http://dancewithnet.com/2007/12/04/a-javascript-module-pattern/|Javascript的一种模块模式]
    * [http://www.ibm.com/developerworks/cn/web/wa-javascript.html|用函数式编程技术编写优美的 JavaScript]
    * [http://shiningray.cn/functional_javascript_programming.html|函数式JavaScript编程指南]

== 参考 BLOG ==
