== EGE 图形库 目录 ==

    * 简介
        * 为什么要写这个库？
        * 本图形库的优点
        * 简单安装说明
        * 简要使用说明
    * 函数库
        * 绘图环境相关函数
        * 颜色表示及相关函数
        * 绘制图形相关函数
        * 文字输出相关函数
        * 图像处理相关函数
        * 鼠标相关函数
        * 时间函数
        * 数学函数
        * 随机函数
        * 其它函数

== 简介 ==

    [http://code.google.com/p/misaka/ EGE]（Easy Graphics Engine）库是一个类似graphics.h的面向C/C++语言新手的BGI图形库。

    它的使用方法与TC中的graphics.h相当接近，只要 {{{#include "graphics.h"}}} 就可以了。对于学习过TC图形的同学来说很容易上手，而且因为接口意义直观。即使是之前完全没有接触过图形编程的，也能迅速学会基本的绘图。

    目前，EGE图形库已经完美支持VC6, VC2005, VC2008, VC2010, C-Free等IDE，且对于mingGW环境的支持较好。

    * [http://easyx.uueasy.com/ 讨论区]
    * [http://blog.misakamm.org/ misakamm's Blog 作者博客]

=== 为什么要写这个库？ ===

    许多学编程的都是从 C 语言开始入门的，而目前的现状是：

    # 有些学校以 Turbo C 为环境讲 C 语言，只是 Turbo C 的环境实在太老了，复制粘贴都很不方便。
    # 有些学校直接拿 VC 来讲 C 语言，因为 VC 的编辑和调试环境都很优秀，并且 VC 有适合教学的免费版本。可惜在 VC 下只能做一些文字性的练习题，想画条直线画个圆都很难，还要注册窗口类、建消息循环等等，初学者会受严重打击的。初学编程想要绘图就得用 TC，很是无奈。
    # 还有计算机图形学，这门课程的重点是绘图算法，而不是 Windows 编程。所以，许多老师不得不用 TC 教学，因为 Windows 绘图太复杂了，会偏离教学的重点。新的图形学的书有不少是用的 OpenGL，可是门槛依然很高。

    如果您刚开始学 C 语言，或者您是一位教C语言的老师，再或者您在教计算机图形学，那么这个库一定会让您兴奋的。采用EGE图形库，您将可以在VC的环境中方便的用类似TC的方法处理和生成图像。

=== 本图形库的优点 ===

    * 绘图效率较好，特别在批量绘图模式下，640*480的半透明混合，可以直接使用 getpixel / putpixel 完成，
        * 并且可以在大约1.5G CPU台式机器上达到60fps（要优化，否则一般的家用机再强也不行）
    * 灵活性更强，绘图可以直接针对一个IMAGE，不必只能画在屏幕上
    * 功能更多，支持拉伸贴图，支持透明半透明贴图，支持图像模糊滤镜操作，
        * 可以用对话框函数进行图形化的输入
    * 面向动画编程和游戏编程做了功能增强，可以方便地对帧率进行准确的控制
    * 附带简单的3D矢量运算函数和类，便于3D计算
    * 支持读写多种格式图片，支持读取bmp, jpg, png, gif，支持保存为bmp和png
    * 支持GUI模式编程

=== 简要安装说明 ===

    把include/graphics.h文件，复制到你的编译器安装目录下的include目录内

    再把lib目录下的文件，复制到你的编译器安装目录下的lib目录内，具体编译器所依赖的文件情况：

    * VC6: graphics.lib
    * VS2008: graphics08.lib graphics08d.lib
    * VS2010: graphics08.lib graphics10d.lib
    * MinGW: libgraphics.a

    * MSYS 中编译要点 
        * g++ yourfile.cpp -lgraphics -lgdi32 -limm32 -lole32 -loleaut32 -lwinmm -luuid -mwindows
        * 其中yourfile.cpp是你要编译的cpp文件

    * C_FREE 链接库设置
        * {{{菜单->构建->构建选项}}} 连接选项卡里添加
        * {{{graphics, gdi32, imm32, ole32, oleaut32, winmm, uuid 共7个}}}
        * [http://cdupload.com/files/168069_f17h1/%E6%9C%AA%E5%91%BD%E5%90%8D.jpg]
        * 此外，C-Free比较特殊的一点是，如果需要编译为Win32应用程序，那么要用WinMain来声明你的主函数，如：
        {{{
#include "graphics.h"
int WinMain() // 这里在graphics.h里已经定义了宏自动把它展开成合法的声明，以减免声明的麻烦，同时用来欺骗C-Free
{
    initgraph(640, 480);
    getch();
    closegraph();
    return 0;
}
        }}}
        * 又或者，如果你不喜欢这样，那就在链接选项里（即刚刚截图里的参数框里）手工加上-mwindows也可

=== 简要使用说明 ===

    目前模拟了绝大多数 BGI 的绘图函数。使用上，基本和 TC / BC 没太大区别
    
    看一个画圆的例子吧：

    {{{
#include "graphics.h"      // 引用ege图形库
int main()
{
    initgraph(640, 480);   // 初始化，显示一个窗口，这里和 TC 略有区别
    circle(200, 200, 100); // 画圆，圆心(200, 200)，半径 100
    getch();               // 暂停一下等待用户按键
    closegraph();          // 关闭图形界面
    return 0;
}
    }}}

    呵呵，很简单吧。

== 库函数 ==

    * 控制台窗口显隐
        * VC6 默认隐藏，需要显示的话输入
            * {{{#define SHOW_CONSOLE}}}
        * C_FREE 需要将主函数名由 {{{main()}}} 改为 {{{WinMain()}}}
    * EGE 开场动画的隐藏
        * 在 {{{initgraph()}}} 前调用
            * {{{setinitmode (0)}}}
        * 也可定义窗口左上角坐标，如
            * {{{setinitmode (0, 50, 35)}}}

=== 绘图环境相关函数 ===

    * cleardevice
        * 清除屏幕
    * clearviewport
        * 清空视图
    * closegraph
        * 关闭图形环境
    * getviewport
        * 获取当前视图信息
    * initgraph
        * 初始化绘图环境
    * setactivepage
        * 设置当前绘图页
    * setinitmode
        * 设置初始化参数
    * setviewport
        * 设置当前视图
    * setvisualpage
        * 设置显示页，把页面内容输出到窗口的页
    * window getviewport
        * 获取当前窗口可见部分
    * window setviewport
        * 设置窗口可见部分
    * WindowLock
        * 切换到锁定窗口更新模式
    * WindowFlush
        * 锁定模式下强制更新窗口
    * WindowUnlock
        * 切换到自动更新模式

==== cleardevice ====

    * 功能
        * 这个函数用于清除画面内容。
        * 具体的，是用当前背景色清空画面。
    * 声明
{{{
void cleardevice (
    PIMAGE pimg = NULL
);
}}}
    * 参数
        * pimg
            * 制定要清除的IMAGE，可选参数。
            * 如果不填本参数，则清空屏幕

    * 返回值：无
    * 示例
{{{
#include "graphics.h"

int main()
{
    initgraph (640, 480);
    circle (200, 200, 100);
    getch();
    cleardevice();
    getch();
    closegraph();
    return 0;
}
}}}

==== clearviewport ====

    * 功能
        * 这个函数用于清空视图
        * 相当于对视图区进行 cleardevice
    * 声明
{{{
void clearviewport (
    PIMAGE pimg = NULL
);
}}}
    * 参数
        * pimg
            * 见 setviewport 
    * 返回值：无
    * 示例：无

==== closegraph ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getviewport ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== initgraph ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setactivepage ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setinitmode ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setviewport ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setvisualpage ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== window getviewport ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== window setviewport ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== WindowLock ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== WindowFlush ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== WindowUnlock ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 颜色表示及相关函数 ===

    * getbkcolor
        * 获取当前绘图背景色
    * GetBValue
        * 返回指定颜色中的蓝色值
    * getcolor
        * 获取当前绘图前景色
    * GetGValue
        * 返回指定颜色中的绿色值
    * GetRValue
        * 返回指定颜色中的蓝色值
    * HSLtoRGB
        * 转换 HSL 颜色为 RGB 颜色
    * HSVtoRGB
        * 转换 HSV 颜色为 RGB 颜色
    * RGB
        * 通过红、绿、蓝颜色分量合成颜色
    * RGBtoGRAY
        * 转换 RGB 颜色为 灰度颜色
    * RGBtoHSL
        * 转换 RGB 颜色为 HSL 颜色
    * RGBtoHSV
        * 转换 RGB 颜色为 HSV 颜色
    * setbkcolor
        * 设置当前绘图背景色
    * setbkcolor_f
        * 设置清屏时所用的背景色
    * setbkmode
        * 设置输出文字时的背景模式
    * setcolor
        * 设置当前绘图前景色
    * setfontbkcolor
        * 设置当前文字背景色

==== getbkcolor ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== GetBValue ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getcolor ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== GetGValue ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== GetRValue ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== HSLtoRGB ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== HSVtoRGB ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== RGB ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== RGBtoGRAY ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== RGBtoHSL ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== RGBtoHSV ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setbkcolor ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setbkcolor_f ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setbkmode ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setcolor ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setfontbkcolor ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 绘制图形相关函数 ===

    * arc
        * 画圆弧
    * bar
        * 画无边框填充矩形
    * bar3d
        * 画有边框三维填充矩形
    * circle
        * 画圆
    * drawbezier
        * 画bezier曲线
    * drawlines
        * 画多条不连续线段
    * drawpoly
        * 画多边形
    * ellipse
        * 画椭圆弧线
    * fillellipse
        * 画填充的椭圆
    * fillpoly
        * 画填充的多边形
    * floodfill
        * 填充区域
    * getfillcolor
        * 获取当前填充颜色
    * getfillstyle
        * 获取当前填充类型（暂不支持）
    * getheight
        * 获取绘图区的高度
    * getlinestyle
        * 获取当前线形
    * getpixel
        * 获取像素点的颜色
    * getwidth
        * 获取绘图区的宽度
    * getx
        * 获取当前 x 坐标
    * gety
        * 获取当前 y 坐标
    * line
        * 画线
    * linerel
        * 画线
    * lineto
        * 画线
    * moverel
        * 移动当前点
    * moveto
        * 移动当前点
    * pieslice
        * 画填充圆扇形
    * putpixel
        * 画像素点
    * putpixels
        * 画多个像素点
    * rectangle
        * 画空心矩形
    * sector
        * 画填充椭圆扇形
    * setfillcolor
        * 设置当前填充颜色
    * setfillstyle
        * 设置当前填充类型
    * setlinestyle
        * 设置当前线形
    * setwritemode
        * 设置绘图位操作模式

==== arc ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== bar ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== bar3d ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== circle ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== drawbezier ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== drawlines ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== drawpoly ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== ellipse ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== fillellipse ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== fillpoly ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== floodfill ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getfillcolor ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getfillstyle ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getheight ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getlinestyle ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getpixel ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getwidth ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== getx ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== gety ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== line ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== linerel ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== lineto ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== moverel ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== moveto ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== pieslice ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== putpixel ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== putpixels ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== rectangle ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== sector ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setfillcolor ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setfillstyle ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setlinestyle ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setwritemode ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 文字输出相关函数 ===

    * getfont
        * 获取当前字体样式
    * LOGFONT
        * 结构体	保存字体样式的结构体
    * outtext
        * 在当前位置输出字符串
    * outtextrect
        * 在指定矩形区域内输出字符串
    * outtextxy
        * 在指定位置输出字符串
    * setfont
        * 设置当前字体样式
    * settextjustify
        * 设置当前文字对齐方式
    * textheight
        * 获取字符串的高
    * textwidth
        * 获取字符串的宽

==== getfont ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== LOGFONT ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== outtext ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== outtextrect ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== outtextxy ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== setfont ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== settextjustify ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== textheight ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== textwidth ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 图像处理相关函数 ===

    * getimage
        * 从屏幕 / 文件 / 资源 / IMAGE 对象中获取图像
    * IMAGE
        * 对象	保存图像的对象
    * imagefilter_blurring
        * 对指定图像进行图像模糊滤镜操作
    * putimage
        * 在屏幕上绘制指定图像
    * putimage_alphablend
        * 在屏幕上以半透明方式绘制指定图像
    * putimage_transparent
        * 在屏幕上以透明方式绘制指定图像
    * putimage_alphatransparent
        * 在屏幕上以透明/半透明方式绘制指定图像
    * 三元光栅操作码
        * 介绍三元光栅操作码

==== getimage ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== IMAGE ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== imagefilter_blurring ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== putimage ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== putimage_alphablend ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== putimage_transparent ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== putimage_alphatransparent ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== 三元光栅操作码 ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 鼠标相关函数 ===

    * FlushMouseMsgBuffer
        * 清空鼠标消息缓冲区
    * GetMouseMsg
        * 获取一个鼠标消息。如果当前鼠标消息队列中没有，就一直等待
    * GetMousePos
        * 获取当前鼠标位置。无等待
    * MouseHit
        * 检测当前是否有鼠标消息
    * ShowMouse
        * 设置鼠标显示状态
    * MOUSEMSG
        * 结构体	保存鼠标消息的结构体

==== FlushMouseMsgBuffer ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== GetMouseMsg ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== GetMousePos ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== MouseHit ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== ShowMouse ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

==== MOUSEMSG ====

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 时间函数 ===

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 数学函数 ===

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 随机函数 ===

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

=== 其它函数 ===

    * 功能
    * 声明
    * 参数
    * 返回值
    * 示例

== 其它资料 ==

    * 开发工具
        * VC6
        * [http://www.programarts.com/cfree_ch/index.htm C_Free]
            * [http://www.programarts.com/cfree_ch/doc/help/hh_start.htm#UsingCF/CompilerSupport/MinGW/MinGW.htm 文档]
        * Mingw
    * 其它图形库
        * [http://www.easyx.cn Easyx]
            * [http://code.google.com/p/vcgraphics/ vcgraphics]
    * BGI 图形库 for TC {{{Win-TC}}}
