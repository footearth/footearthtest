== JAVA 初级课程 ==

    # JAVA 入门
    # JAVA 基础语法
    # JAVA 类和对象
    # JAVA 高级类特性
    # 数组和枚举
    # 常见类的使用
    # 抽象类和接口
    # 异常和断言

=== JAVA 入门 ===

=== JAVA 基础语法 ===

    * 关键字
    * 标识符
    * 数据类型
        * 基本类型
            * byte
            * short
            * int
            * long
            * float
            * double
            * char
            * boolean
        * 引用数据类型
            * String
    * 常量和变量
        * 变量小写
        * 常量大写，单词用下划线（{{{_}}}）分割
    * 编码基础知识
        * 语句
        * 块
        * 注释
        * {{{JavaDoc}}}
        * 空格
        * 编码约定
    * 运算符
        * 算术运算符
        * 比较运算符
        * 逻辑运算符
        * 自增自减运算符
        * 赋值运算符
        * 位运算符
        * 移位运算符
        * 字符串串接
        * 三目运算符
    * 表达式
    * 控制语句
        * 分支语句
            * if, else, elseif
            * switch
        * 循环语句
            * for
            * while
            * do while
        * 特殊控制语句
            * continue
            * break

{{{
/*
 * 输出图形
 *  *
 *  * *
 *  * * *
 *  * * * *
 *  *
 *  * *
 *  * * *
 *  * * * *
 */
public class test {

    public static void main (String arg[]) {

        for (int k=0; k<2; k++) {
            for (int i=0; i<4; i++) {
                for (int j=0; j<i+1; j++) {
                    // System.out.print("k="+k+", i="+i+", j="+j);
                    System.out.print(" * ");
                }
                System.out.print("\n");
            }
        }
    }
}
}}}

=== JAVA 类和对象 ===
    
    * 类的基本构成 —— package
        * 常用包
{{{
    >> cd /d/Program\ Files/Java/jdk1.6.0_27/
    >> mkdir src
    >> cd src
    >> unzip -x ../src.zip
    >> ls
    applet/  awt/  beans/  io/  lang/  math/  net/  nio/  rmi/  security/  sql/  text/  util/
}}}
            * java.lang     常用
            * java.util     工具
            * java.awt      窗口
            * java.swing    图形界面
            * java.io       文件输入输出流
            * java.net      网络
        * 表达、编译、生成和运行包
            {{{
                /*
                 *  PATH = .../java/aa/bb/cc/dd/test.java
                 */

                package aa.bb.cc.dd;

                public class test {

                    public static void main (String arg[]) {
                        System.out.println("Hello Java!\n");
                    }
                }
            }}}
            {{{
                >> cd .../java
                >> ls
                >> aa/
                >> javac aa/bb/cc/dd/test.java
                >> java aa.bb.cc.dd.test
                Hello Java!
            }}}
        * 注意
            * 包结构与目录结构一一对应
            * 包名不能与类名相同
            * 声明必须源文件开头
            * 包名应该全部小写 —— 编码风格
            * 每个源文件只有一个包的声明 {{{package ...;}}}
    * 类的基本构成 —— import 
        * 注意
            * import 语句应位于 package 语句之后，类定义之前
            * 使用{{{*}}}号表示引入包下所有的类，也可以指定要引入的具体的类
            * 目前常用{{{*}}}引入包下所有的类
            * 一个类可以有 0～多条 import 语句
        * 包的搜寻方式
    * 类的基本构成 —— 访问修饰符
        || private   ||同一个类中||
        || 无修饰符  ||同一个类中||同一个包中||
        || protected ||同一个类中||同一个包中||不同包中的之类对象||
        || public    ||同一个类中||同一个包中||不同包中的之类对象||任何场合||
    * 类的定义
{{{
    <访问修饰符> [一般修饰符] class 类名 {

        [<属性定义>]
        [<构造方法定义>]
        [<方法定义>]
    }
}}}
    * 类的基本构成 —— 构造方法
        * 注意
            * 创建对象时初始化成员变量
            * 仅供JDK调用的回调方法
            * 构造方法必须与类同名
            * 并且没有返回类型，void也没有
            * 通常访问修饰符为public
            * 构造方法可以有参数也可以没有
            * 每个类至少有一个构造方法
            * 如果没写，Java将提供一个默认的构造方法，该构造方法没有参数，而且方法体为空
    * 类的基本构成 —— 析构方法 finalize
        * 注意
            * 通知垃圾回收
            * 一般不需要写析构方法
    * 类的基本构成 —— 属性
        * 对象所具有的静态属性
        * 访问修饰符 一般修饰符 类型 属性名称 = 初始值
    * 类的基本构成 —— 方法
        * 方法是对象所具有的动态功能
        * 访问修饰符 一般修饰符 返回值类型 方法名称 (参数列表) throws 异常列表 {方法体}
        * throws 异常列表

