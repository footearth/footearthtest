<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-CN" xml:lang="zh-CN">
<head>
<title>命令参考大全，卷 1，a - c - cpp 命令</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<meta name="dc.date" scheme="iso8601" content="2004-07-28" />
<meta name="copyright" content="(C) IBM公司版权 1997,  2004" />
<meta name="security" content="public" />
<meta name="dc.language" scheme="rfc1766" content="zh-cn" />
<meta name="Robots" content="index,follow"/>
<meta http-equiv="PICS-Label" content='(PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true r (n 0 s 0 v 0 l 0) "http://www.classify.org/safesurf/" l gen true r (SS~~000 1))' />
<meta name="owner" content="ctscrcf@cn.ibm.com" />
<meta name="keywords" content="执行文件包含, C 编程语言" />
<link rel="stylesheet" type="text/css" href="ibmidwb.css" />
<link rel="stylesheet" type="text/css" href="text.css" />
</head>
<body>
<a id="Top_Of_Page" name="Top_Of_Page"></a> <P><center>
<B>[ <a href="cpp.htm#Bot_Of_Page">页的底部</a> | <a href="cplv.htm">上一页</a> | <a href="cpu_state.htm">下一页</a> | <a href="mastertoc.htm#mtoc">目录</a> | <a href="aixcmds102.htm#wq1687">索引</a> |  <A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>资料库</B></A> |
<A HREF="notices.htm"><B>法律条款</B></A> |
<A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>搜索</B></A> ]</B>
</center>
<center><h1>命令参考大全，卷 1，a - c</h1></center>

<a name="r1ffleaf"></a>
<h2 id="r1ffleaf">cpp 命令</h2>
<p><a id="idx564" name="idx564"></a></p>
<a name="a208946f"></a>
<h3 id="a208946f">用途</h3>
<a name="f008d9d935mart"></a>
<p id="f008d9d935mart">完成 C 语言源文件上的文件包含和宏置换。</p>
<a name="a2089471"></a>
<h3 id="a2089471">语法</h3>
<p><span class="bold">/usr/ccs/lib/cpp</span> [&nbsp; <a href="cpp.htm#a2089488"><span class="bold">-C&nbsp;</span></a>] [&nbsp; <a href="cpp.htm#a3z7zf35aclif"><span class="bold">-P&nbsp;</span></a>]&nbsp;[&nbsp; <a href="cpp.htm#qz7zf119clif"><span class="bold">-q</span></a><span class="italic">DBCS&nbsp;</span>] [&nbsp; <a href="cpp.htm#lz7zf3b0clif"><span class="bold">-I</span></a><span class="italic">Directory&nbsp;</span>] [&nbsp; <a href="cpp.htm#cq7zf14bclif"><span class="bold">-U</span></a><span class="italic">Name&nbsp;</span>] [&nbsp; <a href="cpp.htm#uq7zf230clif"><span class="bold">-D</span></a><span class="italic">Name&nbsp;</span>[&nbsp;=<span class="italic">Defin ition&nbsp;</span>]&nbsp;] [&nbsp; <a href="cpp.htm#ha7zfe4clif"><span class="bold">-qlanglvl</span></a><span class="bold">=</span><span class="italic">Language&nbsp;</span>]  [&nbsp;<span class="italic">InFile&nbsp;</span>] [&nbsp;<span class="italic">OutFile&nbsp;</span>]</p>
<a name="a2089472"></a>
<h3 id="a2089472">描述</h3>
<a name="f008d9e488mart"></a>
<p id="f008d9e488mart"><span class="bold">cpp</span> 命令完成 C 语言源文件上的文件包含和宏置换。
它读 <span class="italic">InFile</span> 并且写到 <span class="italic">OutFile</span>
（缺省为标准输入和标准输出）。</p>
<a name="f008d9e639mart"></a>
<p id="f008d9e639mart"><span class="bold">cpp</span> 命令被设计用来
符合由文档“Draft American National Standard for Information Systems
Systems - Programming Language C”（ X3J11/88-159 ）定义的 C 语言预处理伪指令和指令。</p>
<a name="f008d9e809mart"></a>
<p id="f008d9e809mart"><span class="bold">cpp</span> 程序识别下列的特殊名字：</p>
<a name="wq1331"></a>
<table id="wq1331" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="21%">
<a id="a2089466" name="a2089466"></a><span class="bold">__LINE__</span></td>
<td width="78%">  当前行号。</td>
</tr>
<tr>
<td>
<a id="c4476c2055elai" name="c4476c2055elai"></a><span class="bold">__DATE__</span></td>
<td>  源文件的转化日期。</td>
</tr>
<tr>
<td>
<a id="c4476c2173elai" name="c4476c2173elai"></a><span class="bold">__TIME__</span></td>
<td>  源文件的转化时间。</td>
</tr>
<tr>
<td>
<a id="c4476c2293elai" name="c4476c2293elai"></a><span class="bold">__STDC__</span></td>
<td>  指示一个一致的实现。</td>
</tr>
<tr>
<td>
<a id="c4476c2480elai" name="c4476c2480elai"></a><span class="bold">__FILE__</span></td>
<td>  当前文件名。</td>
</tr>
<tr>
<td>
<a id="c4476c2672elai" name="c4476c2672elai"></a><span class="bold">__STR__</span></td>
<td>  指出编译器将为某些字符串函数（在 <span class="bold">/usr/include/string.h</span> 中定义）生成直接插入的代码。</td>
</tr>
<tr>
<td>
<a id="c4476c2856elai" name="c4476c2856elai"></a><span class="bold">__MATH__</span></td>
<td>  指出编译器将为某些数学函数（在 <span class="bold">/usr/include/math.h</span> 中定义）生成直接插入的代码。</td>
</tr>
<tr>
<td>
<a id="c4476c3029elai" name="c4476c3029elai"></a><span class="bold">__ANSI__</span></td>
<td>  指出 <span class="bold"> langlvl</span> 被设定等于 ANSI。</td>
</tr>
<tr>
<td>
<a id="c4476c3122elai" name="c4476c3122elai"></a><span class="bold">__SAA__</span></td>
<td>  指出 <span class="bold">langlvl</span> 被设定等于 SAA。</td>
</tr>
<tr>
<td>
<a id="c4476c3264elai" name="c4476c3264elai"></a><span class="bold">__SAA_L2__</span></td>
<td>  指出 <span class="bold">langlvl</span> 被设定等于 SAAL2。</td>
</tr>
<tr>
<td>
<a id="c4476c3394elai" name="c4476c3394elai"></a><span class="bold">__EXTENDED__</span></td>
<td>  指出 <span class="bold">langlvl</span> 被设定等于 extended。</td>
</tr>
<tr>
<td>
<a id="c4476c3582elai" name="c4476c3582elai"></a><span class="bold">__TIMESTAMP__</span></td>
<td>  指出源文件最近修改的日期和时间。</td>
</tr>
</tbody>
</table>
<a name="f008da0404mart"></a>
<p id="f008da0404mart">所有 <span class="bold">cpp</span> 伪指令行必须
以一个 <span class="bold">#</span>（磅符号）开始。这些伪指令是：</p>
<a name="wq1332"></a>
<table id="wq1332" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="50%">
<a id="a2089476" name="a2089476"></a><span class="bold">#define</span><span class="italic"> Name</span>  <span class="italic">TokenString</span></td>
<td width="50%">  用 <span class="italic">TokenString</span> 取代随后的 <span class="italic">Name</span> 实例。</td>
</tr>
<tr>
<td>
<a id="c4476c4033elai" name="c4476c4033elai"></a><span class="bold">#define</span><span class="italic"> Name</span><span class="bold">(</span><span class="italic">Argument,...,</span><span class="bold"></span><span class="italic">Argument</span><span class="bold">)</span><span class="italic"> TokenString</span></td>
<td>  把随后的 <span class="italic">Name</span>（<span class="italic">Argument</span>,&nbsp;.&nbsp;.&nbsp;.&nbsp;,<span class="italic">Argument</span>）序列的实例用 <span class="italic">TokenString</span> 取代，这里
 <span class="italic">Argument</span> 在 <span class="italic">TokenString</span> 中的每次出现都被逗号分隔的列表中相应的记号取代。
注意，<span class="italic">Name</span>
和左括号之间不能有任何空格。</td>
</tr>
<tr>
<td>
<a id="c4476c4164elai" name="c4476c4164elai"></a><span class="bold">#undef</span><span class="italic"> Name</span></td>
<td>  从这点开始忽略任何 <span class="italic">Name</span> 定义。</td>
</tr>
<tr>
<td>
<a id="c4476c4331elai" name="c4476c4331elai"></a><span class="bold">#include  "</span><span class="italic">File</span><span class="bold">"</span> or <span class="bold">#include &lt;</span><span class="italic">File&gt;</span></td>
<td>  在这点包含 <span class="italic">File</span> 的内容，这个文件将被
 <span class="bold"> cpp</span> 处理。
<a name="c4476c4560elai"></a>
<p id="c4476c4560elai">如果您给
 <span class="italic">File</span> 加上 " " （双引号），
 <span class="bold">cpp</span> 命令首先在 <span class="italic">InFile</span> 目录中搜索，然后在以 <span class="bold">-I</span> 标志指定的目录中搜索，最后在一个标准列表上搜索。</p> 
<a name="a39c68f3453janb"></a>
<p id="a39c68f3453janb">如果您使用 &lt;<span class="italic">File</span>&gt; 符号表示法，<span class="bold">cpp</span> 命令只在标准目录中搜索 <span class="italic">File</span>。
它不搜索 <span class="italic">InFile</span> 驻留的目录。</p></td>
</tr>
<tr>
<td>
<a id="c4476c4912elai" name="c4476c4912elai"></a><span class="bold">#line</span><span class="italic"> Number</span>  ["<span class="italic">File</span>"]</td>
<td>  使得实现表现得好像接下去的源行序列以具有用  <span class="italic">Number</span> 定义的行号的源行开始。如果提供 <span class="italic">File</span>，则假定的文件名被改为 <span class="italic">File</span>。</td>
</tr>
<tr>
<td>
<a id="c4476c5064elai" name="c4476c5064elai"></a><span class="bold">#error</span><span class="italic"> TokenString</span></td>
<td>  产生一个包含 <span class="italic">TokenString</span> 的诊断消息。</td>
</tr>
<tr>
<td>
<a id="c4476c5192elai" name="c4476c5192elai"></a><span class="bold">#pragma</span><span class="italic"> TokenString</span></td>
<td>  编译器的已定义实现的指令。</td>
</tr>
<tr>
<td>
<a id="c4476c5316elai" name="c4476c5316elai"></a><span class="bold">#endif</span></td>
<td>  结束以一个测试伪指令（<span class="bold">#if</span> 、 <span class="bold"> #ifdef</span> 或 <span class="bold">#ifndef</span>）开始的行部分。
每个测试伪指令都必须有一个相匹配的 <span class="bold">#endif</span>。</td>
</tr>
<tr>
<td>
<a id="c4476c5488elai" name="c4476c5488elai"></a><span class="bold">#ifdef</span><span class="italic"> Name</span></td>
<td>  把随后的行放到输出中，仅当：
<a name="c4476c5679elai"></a>
<p id="c4476c5679elai"><span class="italic">Name</span> 已经由先前的 <span class="bold">#define</span>定义</p> 
<a name="a39c68f3471janb"></a>
<p id="a39c68f3471janb">或者</p> 
<a name="a39c68f3483janb"></a>
<p id="a39c68f3483janb"><span class="italic">Name</span> 已经由 <span class="bold">-D</span>
 标志定义,</p> 
<a name="a39c68f3608janb"></a>
<p id="a39c68f3608janb">或者</p> 
<a name="a39c68f3647janb"></a>
<p id="a39c68f3647janb"><span class="italic">Name</span> 是一个 <span class="bold">cpp</span>
 命令可识别的特殊名字，</p> 
<a name="a39c68f3688janb"></a>
<p id="a39c68f3688janb">并且</p> 
<a name="a39c68f3730janb"></a>
<p id="a39c68f3730janb"><span class="italic">Name</span> 还没有被一个插入的 <span class="bold">#undef</span> 取消定义，</p> 
<a name="a39c68f3761janb"></a>
<p id="a39c68f3761janb">或者</p> 
<a name="a39c68f3813janb"></a>
<p id="a39c68f3813janb"><span class="italic">Name</span> 还没有被 <span class="bold">-U</span> 标志取消定义。</p></td>
</tr>
<tr>
<td>
<a id="c4476c7051elai" name="c4476c7051elai"></a><span class="bold">#ifndef</span><span class="italic"> Name</span></td>
<td>  把随后的行放到输出中，仅当：
<a name="a39c68f3877janb"></a>
<p id="a39c68f3877janb"><span class="italic">Name</span> 从没有被先前的 <span class="bold"> #define</span> 定义，</p> 
<a name="a39c68f3910janb"></a>
<p id="a39c68f3910janb">并且</p> 
<a name="a39c68f3986janb"></a>
<p id="a39c68f3986janb"><span class="italic">Name</span> 不是一个 <span class="bold">cpp</span> 命令可识别的特殊名字，</p> 
<a name="a39c68f4018janb"></a>
<p id="a39c68f4018janb">或者</p> 
<a name="a39c68f4059janb"></a>
<p id="a39c68f4059janb"><span class="italic">Name</span> 已经被先前的一个 <span class="bold">#define</span> 定义，但是它已经被一个插入的 <span class="bold">#undef</span> 取消定义，</p> 
<a name="a39c68f4101janb"></a>
<p id="a39c68f4101janb">或者</p> 
<a name="a39c68f4141janb"></a>
<p id="a39c68f4141janb"><span class="italic">Name</span> 是一个 <span class="bold">cpp</span> 命令可识别的特殊名字，但是它已经被 <span class="bold"> -U</span>
 标志取消定义。</p></td>
</tr>
<tr>
<td>
<a id="c4476c8246elai" name="c4476c8246elai"></a><span class="bold">#if</span><span class="italic"> Expression</span></td>
<td>  把随后的行放到输出中，仅当 <span class="italic">Expression</span> 求值不是零。所有的二进制未分配 C 运算符，
 ?: 运算符，和一元运算符 -、!、和 -,在 <span class="italic">Expression</span> 中都是合法的。运算符的优先顺序和 C 语言中定义的相同。
还有一个一元运算符 <span class="bold">defined</span>，它可以在 <span class="italic">Expression</span> 中以两种形式使用：

<dl>
<dt class="bold"><span class="bold">defined</span>（<span class="italic">Name</span>）
或  <span class="bold">defined</span><span class="italic"> Name</span></dt>
<dd>  这允许 <span class="bold">#ifdef</span> 和 <span class="bold">#ifndef</span> 在一个 <span class="bold">#if</span> 伪指令中使用。只有这些
被 <span class="bold">cpp</span>
所知的运算符、整型常量和名字可以在 <span class="italic"> Expression</span> 中使用。 <span class="bold">sizeof</span> 运算符不可用。
</dd>
</dl></td>
</tr>
<tr>
<td>
<a id="c4476c8582elai" name="c4476c8582elai"></a><span class="bold">#elif</span><span class="italic"> Expression</span></td>
<td>  把随后的行放到输出中，只要前面的
 <span class="bold">#if</span> 或 <span class="bold">#elif</span> 伪指令
中的表达式求值为 false 或未定义，并且这个 <span class="italic">Expression</span> 求值为 true。</td>
</tr>
<tr>
<td>
<a id="c4476c8793elai" name="c4476c8793elai"></a><span class="bold">#else</span></td>
<td>  把随后的行放到输出中，只要前面的
 <span class="bold">#if</span> 或 <span class="bold">#elif</span> 伪指令
中的表达式求值为 false 或未定义（因此在 <span class="bold">#if</span> 之后，在 <span class="bold">#else</span> 之前的行都被忽略）。

<a name="a39c68f4228janb"></a>
<p id="a39c68f4228janb">每个测试伪指令条件都被依次检查。
如果它求值为 false （0），它控制的分组被跳过。
只通过确定伪指令的名字来处理伪指令
以便于跟踪嵌套条件的层次；
组中有其它的预处理记号，伪指令的其余预处理记号被忽略。只有控制条件为 true（非零）的第一组被处理。
如果没有一个控制条件计算为 true，并且有
 <span class="bold">#else</span> 伪指令，
则由 <span class="bold">#else</span> 控制的那组被处理；缺少一个
 <span class="bold">#else</span> 伪指令，到<span class="bold">#endif</span> 为止所有的组都被跳过。</p></td>
</tr>
</tbody>
</table>
<a name="a2089487"></a>
<h3 id="a2089487">标志</h3>
<p></p>
<a name="wq1333"></a>
<table id="wq1333" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="31%">
<a id="a2089488" name="a2089488"></a><span class="bold">-C</span></td>
<td width="68%">  从源文件拷贝 C 语言注释到输出文件。
如果您省略了这个标志，<span class="bold">cpp</span> 命令除去除了
 <span class="bold"> cpp</span> 伪指令行中的所有 C 语言注释。</td>
</tr>
<tr>
<td>
<a id="uq7zf230clif" name="uq7zf230clif"></a><span class="bold">-D</span><span class="italic">Name</span>[<span class="bold">=</span><span class="italic">Definition</span>]</td>
<td>  如同在一个 <span class="bold">#define</span> 伪指令中那样定义 <span class="italic">Name</span>。<span class="italic">Definition</span> 的缺省值是 <span class="bold">1</span>。</td>
</tr>
<tr>
<td>
<a id="lz7zf3b0clif" name="lz7zf3b0clif"></a><span class="bold">-I</span><span class="italic">Directory</span></td>
<td>  首先查找 <span class="italic">Directory</span> ，再查找针对<span class="bold">#include</span> 文件的标准列表上的目录中不是以一个 / （正斜杠）开始的名字。参见先前的关于 <span class="bold">#include</span> 的讨论。</td>
</tr>
<tr>
<td>
<a id="a3z7zf35aclif" name="a3z7zf35aclif"></a><span class="bold">-P</span></td>
<td>  预处理输入而不为 C 编译器的下一趟执行产生行控制信息。</td>
</tr>
<tr>
<td>
<a id="qz7zf119clif" name="qz7zf119clif"></a><span class="bold">-q</span><span class="italic">DBCS</span></td>
<td>  指定双字节字符集方式。</td>
</tr>
<tr>
<td>
<a id="cq7zf14bclif" name="cq7zf14bclif"></a><span class="bold">-U</span><span class="italic">Name</span></td>
<td>  除去所有 <span class="italic">Name</span> 的初始定义，这里 <span class="italic">Name</span> 是一个预处理器预定义的一个符号（除了四个预处理器方式指示符：
 <span class="bold">__ANSI__</span>、<span class="bold">__EXTENDED__</span>、<span class="bold"> __SAA__</span> 和 <span class="bold">__SAA_L2__</span>）。在 ANSI 方式中不识别这个标志。</td>
</tr>
<tr>
<td>
<a id="ha7zfe4clif" name="ha7zfe4clif"></a><span class="bold">-qlanglvl=</span><span class="italic">Language</span></td>
<td>  为处理选择一个语言级别。<span class="italic">Language</span> 可以是 ANSI 、SAA 、SAAL2 或扩展。缺省是扩展。
<p></p><blockquote><span class="bold">注：</span>当 <span class="italic">Language</span> 是扩展时，
 _NO_PROTO 不被自动定义。可以使用
 <span class="bold">-D</span> 选项完成这些定义，这个选项在 <span class="bold">/etc/xlc.cfg</span> 文件中。</blockquote></td>
</tr>
</tbody>
</table>
<a name="a208948d"></a>
<h3 id="a208948d">示例</h3>
<ol type="1">
<li><a name="a208948e"></a><span id="a208948e" class="pk"></span>为了显示预处理器发给 C 编译器的文本，输入：

<p></p>
<a name="a208948f"></a>
<pre id="a208948f" class="xmp">/usr/ccs/lib/cpp pgm.c</pre><p class="indatacontent">
这将预处理 <tt>pgm.c</tt> 并且在工作站上显示结果文本。
当在宏定义中寻找错误时，您也许会想看看预处理器的输出。</p></li>
<li><a name="a2089491"></a><span id="a2089491" class="pk"></span>要创建一个包含更多可读的预处理过的文本的文件，输入：

<p></p>
<a name="a2089492"></a>
<pre id="a2089492" class="xmp">/usr/ccs/lib/cpp -P -C pgm.c pgm.i</pre><p class="indatacontent">
这将预处理 <tt>pgm.c</tt> 并且存储结果到
 <tt>pgm.i</tt> 中。它忽略供 C 编译器使用的行编号信息
（ <tt>-P</tt>），并且包含程序注释（ <tt>-C</tt> ）。</p></li>
<li><a name="a2089494"></a><span id="a2089494" class="pk"></span>要预定义宏标识符，输入
<p></p>
<a name="a2089495"></a>
<pre id="a2089495" class="xmp">/usr/ccs/lib/cpp -DBUFFERSIZE=512 -DDEBUG 
pgm.c 
pgm.i</pre><p class="indatacontent"> 这将在预处理前定义 <tt>BUFFERSIZE</tt> 的值为 <tt>512</tt> 以及 <tt>DEBUG</tt> 的值为
 <tt>1</tt>。</p></li>
<li><a name="a2089497"></a><span id="a2089497" class="pk"></span>要使用位于非标准目录的 <span class="bold">#include</span> 文件，输入：
<p></p>
<a name="a2089498"></a>
<pre id="a2089498" class="xmp">/usr/ccs/lib/cpp -I/home/jim/include 
pgm.c</pre><p class="indatacontent"> 这将在当前目录中查找引号引起来的 <span class="bold">#include</span> 文件，然后在 <tt>/home/jim/include</tt>中，
最后在标准目录中找。它在 <tt>/home/jim/include</tt> 中查找角括号括起来的 <span class="bold">#include</span>
文件（&lt; &gt;），然后在标准目录中找。</p></li>
<li><a name="a208946b"></a><span id="a208946b" class="pk"></span>要预处理 ANSI 定义，输入：
<p></p>
<a name="a2089469"></a>
<pre id="a2089469" class="xmp">/usr/ccs/lib/cpp -qlanglvl=ansi pgm.c</pre></li></ol>
<a name="a208949a"></a>
<h3 id="a208949a">文件</h3>
<p></p>
<a name="wq1335"></a>
<table id="wq1335" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="24%"><span class="bold">/usr/include</span></td>
<td width="76%"><span class="bold">#include</span> 文件的标准目录。</td>
</tr>
</tbody>
</table>
<a name="a208949c"></a>
<h3 id="a208949c">相关信息</h3>
<a name="f008da5326mart"></a>
<p id="f008da5326mart"><a href="http://study.chyangwa.com/IT/AIX/aixcmds1/zh_CN/cmds/aixcmds3/m4.htm#a258b9f"><span class="bold">m4</span></a>
命令。</p>
<FONT COLOR="#A62A2A"></FONT><p></p>
   <center>
<B>[ <a href="cpp.htm#Top_Of_Page">页的顶部</a> | <a href="cplv.htm">上一页</a> | <a href="cpu_state.htm">下一页</a> | <a href="mastertoc.htm#mtoc">目录</a> | <a href="aixcmds102.htm#wq1687">索引</a> | <A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>资料库</B></A> |
<A HREF="notices.htm"><B>法律条款</B></A> |
<A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>搜索</B></A> ]</B>
</center>

<a id="Bot_Of_Page" name="Bot_Of_Page"></a>
</body>
</html>
