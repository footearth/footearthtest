<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-CN" xml:lang="zh-CN">
<head>
<title>命令参考大全，卷 3，i - m - ld 命令</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<meta name="dc.date" scheme="iso8601" content="2004-07-28" />
<meta name="copyright" content="(C) IBM公司版权 1997, 2004" />
<meta name="security" content="public" />
<meta name="dc.language" scheme="rfc1766" content="zh-cn" />
<meta name="Robots" content="index,follow"/>
<meta http-equiv="PICS-Label" content='(PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true r (n 0 s 0 v 0 l 0) "http://www.classify.org/safesurf/" l gen true r (SS~~000 1))' />
<meta name="owner" content="ctscrcf@cn.ibm.com" />
<meta name="keywords" content="ld 命令, ld, 命令, 使用 ld 命令, 链接, 对象代码,
链接对象, 文件, 链接方式, 方式，链接, 归档文件, 归档, 共享对象, 共享的, 对象,
导入和导出文件, 导入和导出, 库, 处理, 符号, 垃圾收集, 忽略的和不支持的, 标志,
忽略的和不支持的标记。, 绑定程序, 在 ld 命令中, 选项（-bOptions）, 运行时链接,
-bI: 和 -bE: 标志, 导入和导出文格式, 导入和导出文件格式, 已导出符号的, 属性,
地址映射, 环境变量, 示例" />
<link rel="stylesheet" type="text/css" href="ibmidwb.css" />
<link rel="stylesheet" type="text/css" href="text.css" />
</head>
<body>
<a id="Top_Of_Page" name="Top_Of_Page"></a> <P><center>
<B>[ <a href="ld.htm#Bot_Of_Page">页的底部</a> | <a href="lbxproxy.htm">上一页</a> | <a href="ldd.htm">下一页</a> | <a href="mastertoc.htm#mtoc">目录</a> | <a href="aixcmds302.htm#wq2149">索引</a> |  <A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>资料库</B></A> |
<A HREF="notices.htm"><B>法律条款</B></A> |
<A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>搜索</B></A> ]</B>
</center>
<center><h1>命令参考大全，卷 3，i - m</h1></center>

<a name="a09493ac"></a>
<h2 id="a09493ac">ld 命令</h2><a id="idx205" name="idx205"></a><a id="idx206" name="idx206"></a>
<a name="a09493ad"></a>
<h3 id="a09493ad">用途</h3><a id="idx207" name="idx207"></a><a id="idx208" name="idx208"></a>
<a name="e5b713e842mart"></a>
<p id="e5b713e842mart">链接对象代码。</p>
<a name="d7cb2a0722jani"></a>
<h3 id="d7cb2a0722jani">语法</h3>
<p><span class="bold">ld</span> [  <a href="ld.htm#lhmzf1d1clif"><span class="bold">-D</span></a><span class="italic">Number</span> ] [  <a href="ld.htm#wgmzf2bfclif"><span class="bold">-e</span></a><span class="italic">Label</span> ] [  <a href="ld.htm#a3c4f276668stue"><span class="bold">-G </span></a>] [  <a href="ld.htm#jhmzf32clif"><span class="bold">-H</span></a><span class="italic">Number</span> ]  [  <a href="ld.htm#cimzf17aclif"><span class="bold">-K </span></a>] [  <a href="ld.htm#aimzfddclif"><span class="bold">-m</span></a>] [  <a href="ld.htm#aimzfddclif"><span class="bold">-M </span></a>] [  <a href="ld.htm#jjmzf1fbclif"><span class="bold">-o</span></a><span class="italic">Name</span> ] [  <a href="ld.htm#kkmzf185clif"><span class="bold">-r </span></a>] [  <a href="ld.htm#nmmzffcclif"><span class="bold">-s </span></a>] [  <a href="ld.htm#anmzf224clif"><span class="bold">-S</span></a><span class="italic">Number</span> ] [  <a href="ld.htm#znmzfe9clif"><span class="bold">-T</span></a><span class="italic">Number</span> ] [ <a href="ld.htm#rwkni3c8harr"> <span class="bold">-u</span></a><span class="italic"> Name</span> ] ... [  <a href="ld.htm#wnmzf23aclif"><span class="bold">-v </span></a>] [  <a href="ld.htm#a1qmzf1a4clif"><span class="bold">-z </span></a>]  [  <a href="ld.htm#ipmzf3beclif"><span class="bold">-Z</span></a><span class="italic">String</span> ] ... [  <a href="ld.htm#dtmzf2abclif"><span class="bold">-b</span></a><span class="italic">Option</span> ] ... [  <a href="ld.htm#a09493c3"><span class="bold">-L</span></a><span class="italic">Directory</span> ] ... {  <a href="ld.htm#a5rmzf231clif"><span class="bold">-f</span></a><span class="italic">FileID</span> ...  <a href="ld.htm#a09493c2"><span class="bold">-l</span></a><span class="italic">Name</span> ... <span class="italic">InputFile</span> ... }</p>
<a name="a09493b0"></a>
<h3 id="a09493b0">描述</h3>
<a name="e5b713f735mart"></a>
<p id="e5b713f735mart"><span class="bold">ld</span>命令，也称为链接编辑程序或绑定程序，组合对象代码、归档文件并导入文件到一个输出对象代码，同时解析外部引用。生成可运行的可执行对象代码。此外，如果指定的 <span class="bold">ld</span>命令没有 <span class="bold">-s</span>标记，可以把输出文件作为 <span class="italic">InputFile</span> 参数调用另一个 <span class="bold">ld</span>命令。缺省情况下，<span class="bold"> ld</span>命令创建并输出到 <span class="bold">a.out</span> 文件里。</p>
<a name="e5b713f888mart"></a>
<p id="e5b713f888mart"><span class="bold">ld</span> 命令可以不必再次列出所有输入对象代码就重新链接程序。例如，如果更改了一个大程序的对象代码，可以通过列出新对象代码和旧程序，以及该程序所需的所有共享库来重新链接程序。请参阅 <a href="ld.htm#a09493d1">示例</a>。</p>
<a name="e5b7140265mart"></a>
<p id="e5b7140265mart"><span class="bold">ld</span>命令以命令行指定的顺序链接输入文件。如果不止一次指定文件，仅处理第一次出现的文件。必须至少指定一个输入文件，带有 <span class="bold">-bI</span>（大写字母 i），<span class="bold">-bimport</span>，<span class="bold">-bkeepfile</span>，<span class="bold">-f</span> 或 <span class="bold">-l</span>（小写字母 L）标记或作为一个<span class="italic">InputFile</span> 参数。（<span class="bold">-bI</span>、<span class="bold">-bimport</span>或<span class="bold">-bkeepfile</span> 标记是与 <span class="bold">I</span>、<span class="bold">import</span> 或 <span class="bold">keepfile</span> 选项一起使用的 <span class="bold">-b</span> 标记。）</p>
<a name="e5b7141222mart"></a>
<p id="e5b7141222mart">当生成在操作系统下运行的的程序时，可以使用 <span class="bold">cc</span> 命令链接文件。因为 <span class="bold">cc</span> 命令用公共选项和必备支持库调用 <span class="bold">ld</span> 命令，所以可以不在命令行中指定。（从<span class="bold"> /etc/xlC.cfg</span> 或 <span class="bold">/etc/vac.cfb</span> 配置文件中读取信息。）</p>
<a name="wq473"></a>
<h4 id="wq473">链接方式</h4><a id="idx209" name="idx209"></a><a id="idx210" name="idx210"></a>
<p><span class="bold">ld</span>命令可以和 64 位对象和程序一样链接 32 位对象和程序，但是 32 位和 64 位对象不能链接在一起。要指定链接方式，可以使用  <a href="ld.htm#i0820970733mikm"><span class="bold">OBJECT_MODE</span></a> 环境变量，或 <span class="bold">-b32</span> 或 <span class="bold">-b64</span>选项。</p>
<a name="d7cb2a1180jani"></a>
<h4 id="d7cb2a1180jani">归档文件</h4><a id="idx211" name="idx211"></a><a id="idx212" name="idx212"></a>
<a name="e5b7142235mart"></a>
<p id="e5b7142235mart">归档文件是复合对象，它通常包含共享文件和对象代码，其中包括了共享对象。如果归档文件包含另一个归档文件或不能识别类型的成员，<span class="bold">ld</span>命令发出一个警告并忽略不能识别的成员。如果包含于归档文件中的对象代码 XCOFF 头里有  <span class="bold">F_LOADONLY</span> 位集，<span class="bold">ld</span> 命令忽略成员。这个位通常被用来指明在归档文件中共享对象的老版本允许装入和运行现有的应用程序。新应用程序与共享对象的新版本，既归档的另一个成员，进行链接。</p>
<a name="d7cb2a1257jani"></a>
<h4 id="d7cb2a1257jani">共享对象</h4><a id="idx213" name="idx213"></a><a id="idx214" name="idx214"></a>
<a name="e5b7142452mart"></a>
<p id="e5b7142452mart">共享对象，通常通过 <span class="bold">ld</span>命令的其它调用创建，是 XCOFF 头里有 <span class="bold">F_SHROBJ</span> 位集的对象代码。共享对象定义了在运行时解析的外部符号。如果指定了<span class="bold">-bnso</span> 或 <span class="bold">-bnoautoimp</span> 选项，<span class="bold">ld</span> 命令作为普通对象代码处理共享对象，如果文件被移除，则链接失败。</p>
<a name="a3c4f276598stue"></a>
<p id="a3c4f276598stue">通常，如果确实引用了共享对象中的符号，作为输入的共享对象仅列在输出文件的装入程序部分。当使用运行时链接程序，即使在无引用的符号时也可以要求列出共享对象。当使用 <span class="bold">-brtl</span> 选项时，所有列在不是归档成员的命令行中的共享对象列在输出文件中。当程序运行时，系统装入程序装入所有这样的共享对象，并且运行时链接程序可以使用所有共享对象导出的符号。除非归档里的导入文件启动了自动装入，否则作为归档成员的共享对象不能自动地装入。启用自动装入，请参阅 <a href="ld.htm#a3119106d">导入和导出文件格式（-bI: 和 -bE: 标志）</a>。</p>
<a name="d7cb2a1332jani"></a>
<h4 id="d7cb2a1332jani">导入和导出文件</h4><a id="idx215" name="idx215"></a><a id="idx216" name="idx216"></a>
<a name="e5b7143471mart"></a>
<p id="e5b7143471mart">导入文件是标识运行时要解析的外部符号的 ASCII 文件。导入文件标识定义已导入的符号的共享对象。系统在运行时装入程序查找和解析符号。如果导入文件的首行以 # 开始! （#，感叹号），可以指定命令行中文件作为普通的 <span class="italic">InputFile</span>。否则，必须使用 <span class="bold">-bI</span> 或 <span class="bold">-bimport</span> 选项指定导入文件。</p>
<a name="e5b7143622mart"></a>
<p id="e5b7143622mart">导出文件是识别其它要导入的可执行对象可用的外部符号的 ASCII 文件。导出文件格式与导入文件格式一样。</p>
<a name="d7cb2a1424jani"></a>
<h4 id="d7cb2a1424jani">库</h4><a id="idx217" name="idx217"></a><a id="idx218" name="idx218"></a>
<a name="e5b7144063mart"></a>
<p id="e5b7144063mart">库是名称以<span class="bold">.a</span>，也可能是以 <span class="bold">.so</span> 结束的文件。要指定库，可以指定一个完整或相对路径，或以 <span class="bold">-l</span><span class="italic">Name</span>形式使用 <span class="bold">-l</span>（小写字母 L）标记。 最后格式指明了在多个目录下搜索<span class="bold">lib</span><span class="italic">Name</span><span class="bold">.a</span> 文件，或以动态方式搜索 <span class="bold">lib</span><span class="italic">Name</span><span class="bold">.so</span> 文件。搜索目录包含以<span class="bold">-L</span>标记指定的目录和标准库目录 <span class="bold">/usr/lib</span> 和 <span class="bold">/lib</span>。</p>
<p></p>
<a name="d7cb2a1724jani"></a>
<div class="notetitle" id="d7cb2a1724jani">注:</div>
<div class="notebody"> 如果指定了一个共享对象，或包含共享对象的归档文件，其中含有完整或相对路径，而不含有 <span class="bold">-l</span><span class="italic">Name</span> 标记，输出文件的装入程序部分的导入文件 ID 字符串包含路径名。可以用 <span class="bold">-bnoipath</span> 选项覆盖此行为。</div>
<a name="d7cb2a1765jani"></a>
<h4 id="d7cb2a1765jani">处理</h4><a id="idx219" name="idx219"></a>
<a name="e5b7144373mart"></a>
<p id="e5b7144373mart"><span class="bold">ld</span>命令以相同方式处理所有输入文件，不管是不是归档。它包含所有对象的符号表，并废弃重复现有符号的符号定义。不象 <span class="bold">ld</span> 命令的其它版本，不必排列归档文件的顺序，因此引用在定义之前。甚至，不必在命令行中不止一次地列出归档文件。</p>
<a name="e5b7144527mart"></a>
<p id="e5b7144527mart"><span class="bold">ld</span> 命令标记的顺序不影响如何处理，除非标记和输入对象代码、库和导入文件一起使用。标记是：<span class="bold">-L</span>、<span class="bold">-f</span>、<span class="bold">-l</span>（小写字母 L）、<span class="bold">-bkeepfile</span> 和 <span class="bold">-bI</span>（大写字母）。标记以下列顺序处理：</p>
<ol type="1">
<li><span class="bold">-L</span>标记添加目录到搜索目录列表来定位由<span class="bold">-l</span>（小写字母 L）标记指定的库。按指定的顺序搜索目录。所有 <span class="bold">-L</span> 标记处理在处理任意<span class="bold">-l</span> 标记之前进行。</li>
<li><span class="bold">ld</span> 命令处理 <span class="italic">InputFile</span>参数，以指定顺序由<span class="bold">-f</span>标记指定的文件和由 <span class="bold">-l</span>（小写字母 L）标记指定的库。</li>
<li>在处理所有其它对象代码和库之后，<span class="bold">ld</span> 命令处理由 <span class="bold">-bI</span>（大写字母 i）标记指定的导入文件。如果在处理对象代码之前必须处理该文件，可以不用 <span class="bold">-bI</span> 参数指定一个导入文件作为输入文件。这种情况下，导入文件的第一行必须以 #!（#，感叹号）符号开始，导入文件和其它输入文件按第 2 步描述的处理。</li>
<li><span class="bold">-bkeepfile</span> 选项命名一个 <span class="bold">ld</span>命令不在其上执行垃圾收集的输入文件。如果已制定的输入文件作为一个 <span class="italic">InputFile</span> 参数指定或列在由 <span class="bold">-f</span> 标记指定的文件里，<span class="bold">-bkeepfile</span> 选项不影响文件处理的顺序。否则，文件和其它输入文件一起按第 2 步描述的顺序处理。</li></ol>
<a name="e5b7145866mart"></a>
<p id="e5b7145866mart">由 <span class="bold">ld</span> 命令生成的输出文件有执行许可集，如果不指定<span class="bold"> -r</span> 标记或 <span class="bold">-bnox</span>选项或在链接时报告错误。如果出现任何严重错误或输出文件指定为输入文件时出现错误，不会覆盖现有的输出文件。</p>
<a name="d7cb2a4020jani"></a>
<h4 id="d7cb2a4020jani">符号</h4><a id="idx220" name="idx220"></a>
<a name="e5b7146149mart"></a>
<p id="e5b7146149mart"><span class="bold">ld</span> 命令使用下列预定义符号提供特殊地址位置并且可以以 C 语法声明为 <span class="bold">extern char</span><span class="italic"> name</span><span class="bold">[ ]</span>。符号名是：</p>
<a name="wq475"></a>
<table id="wq475" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="18%">
<a id="a114c1c68" name="a114c1c68"></a><span class="bold">_text</span></td>
<td width="81%">  指定程序的第一个位置。</td>
</tr>
<tr>
<td>
<a id="c1cbe3a696joy" name="c1cbe3a696joy"></a><span class="bold">_etext</span></td>
<td>  指定程序后的第一个位置。</td>
</tr>
<tr>
<td>
<a id="c1cbe3a604joy" name="c1cbe3a604joy"></a><span class="bold">_data</span></td>
<td>  指定数据的第一个位置。</td>
</tr>
<tr>
<td>
<a id="c1cbe3a789joy" name="c1cbe3a789joy"></a><span class="bold">_edata</span></td>
<td>  指定已初始化的数据后的第一个开头。</td>
</tr>
<tr>
<td>
<a id="c1cbe3a879joy" name="c1cbe3a879joy"></a><span class="bold">_end</span> 或 <span class="bold">end</span></td>
<td>  指定所有数据后的第一个位置。</td>
</tr>
</tbody>
</table>
<a name="e5b7147418mart"></a>
<p id="e5b7147418mart">使用符号的唯一方式是取用它的地址。如果输入文件重新定义了任何符号，可能产生不可预知的结果。附加的预定义符号，<span class="bold">_ptrgl</span>，被编译程序用来实现使用函数指针的调用。</p>
<a name="d7cb2a4439jani"></a>
<h4 id="d7cb2a4439jani">垃圾收集</h4><a id="idx221" name="idx221"></a><a id="idx222" name="idx222"></a>
<a name="e5b7148496mart"></a>
<p id="e5b7148496mart">缺省情况下，当生成输出文件时 <span class="bold">ld</span> 命令执行垃圾收集，删除不被引用的控制部分（CSECT）。</p>
<a name="e5b7148649mart"></a>
<p id="e5b7148649mart">CSECT 是不可分的代码或数据单元。如果包含有关于其它 CSECT 中符号的重定位项（RLD），此 CSECT 将引用其它 CSECT。引用的 CSECT 导致它引用的所有 CSECT 也被引用。此外，如果包含已导出的符号、用<span class="bold">-u</span> 标记指定的符号或用 <span class="bold">-e</span> 标记指明为入口点的符号，则引用 CSECT。</p>
<a name="e5b7148802mart"></a>
<p id="e5b7148802mart">如果输出文件中需要符号但没有引用符号，可以导出符号，用<span class="bold">-u</span> 标记指定符号或抑制垃圾收集。要抑制垃圾信息收集，使用 <span class="bold">-r</span> 标记或 <span class="bold">-bnogc</span> 选项。抑制单独对象代码的垃圾收集，使用 <span class="bold">-bkeepfile</span> 选项或 <span class="bold">-bgcbypass</span> 选项。甚至当抑制垃圾信息收集时，将删除未引用的内部符号。</p>
<a name="d7cb2a4816jani"></a>
<h4 id="d7cb2a4816jani">忽略和不支持的标记</h4><a id="idx223" name="idx223"></a><a id="idx224" name="idx224"></a>
<a name="e5b7149098mart"></a>
<p id="e5b7149098mart">为了能和其它版本的<span class="bold">ld</span> 命令兼容，一些标记能识别但被忽略掉。标记产生声明忽略标记和它的操作数的消息。忽略的标记没有进一步的处理不会导致 <span class="bold">ld</span>命令停止。忽略下列标记：</p>
<p></p>
<a name="d7cb2a5070jani"></a>
<pre id="d7cb2a5070jani" class="xmp"><span class="bold">-A</span>Number         <span class="bold">-bnostrcmpct</span><span class="bold">     -n</span>
<span class="bold">-bfilelist       -bstrcmpct       -N</span>
<span class="bold">-bfl             -B</span>Number<span class="bold">         -Q</span>
<span class="bold">-bforceimp       -d               -R</span>Number
<span class="bold">-bi              -i</span><span class="bold">               -V</span>Number
<span class="bold">-binsert         -j[</span>Key<span class="bold">:]</span>Number<span class="bold">   -x</span>
<span class="bold">-bnoforceimp     -k</span>Key<span class="bold">:</span>Path      <span class="bold"> -Y</span>Number</pre>
<a name="e5b7149323mart"></a>
<p id="e5b7149323mart"><span class="bold">ld</span> 命令中不支持的标记将导致错误消息。在诊断完所有不支持的的标记后，没有进一步处理 <span class="bold">ld</span>命令将停止。</p>
<a name="a09493b6"></a>
<h3 id="a09493b6">标记</h3>
<a name="e5b7149608mart"></a>
<p id="e5b7149608mart">除了参数 <tt>--</tt> 仅适用于下一个操作数，不适用于命令行的其余操作数之外，<span class="pk">ld</span> 命令符合 XPG 实用程序语法准则。例如，在命令行里：</p>
<p></p>
<a name="df5e0ab703mich"></a>
<pre id="df5e0ab703mich" class="xmp">ld -- -s -v</pre>
<a name="e5b7149817mart"></a>
<p id="e5b7149817mart"><tt>-s</tt> 看作文件名，<tt>-v</tt> 看作标记。<tt class="xph">-v</tt> 看作文件名，指定：</p>
<p></p>
<a name="df5e0ab852mich"></a>
<pre id="df5e0ab852mich" class="xmp">ld -- -s -- -v </pre>
<a name="a2149d34"></a>
<div class="notetitle" id="a2149d34">注:</div>
<div class="notebody">键入带有操作数的标记，标记和操作数之间可有也可没有空格。可以以十进制、八进制（开头为 0）或十六进制（开头是 0x 或 0X）格式指定数字值。如果在命令行中指定冲突的标记，<span class="bold">ld</span>命令接受最后的标记，忽略先前标记。</div>
<a name="wq476"></a>
<table id="wq476" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="18%">
<a id="dtmzf2abclif" name="dtmzf2abclif"></a><span class="bold">-b</span><span class="italic">Option</span></td>
<td width="81%">  设置特殊处理选项。可以重复选项。关于选项的更多信息，请参阅 <a href="ld.htm#xpudj83amy">选项（-bOptions）</a>。</td>
</tr>
<tr>
<td>
<a id="lhmzf1d1clif" name="lhmzf1d1clif"></a><span class="bold">-D</span><span class="italic">Number</span></td>
<td>  设置输出文件的已初始化数据（数据部分）的开始地址到  <span class="italic">Number</span>。 如果指定数据是 -1，在文本部分后立即启动数据部分。缺省情况下，数据部分在位置 0 处开始。
<a name="wq477"></a>
<div class="notetitle" id="wq477">注:</div>
<div class="notebody">在运行时系统装入程序重定位数据部分，因此指定的数字仅影响列在地址映射中或被实用程序，诸如 <span class="bold">dump</span> 或 <span class="bold">nm</span> 命令，打印的地址中。</div></td>
</tr>
<tr>
<td>
<a id="wgmzf2bfclif" name="wgmzf2bfclif"></a><span class="bold">-e</span><span class="italic">Label</span></td>
<td>  设置可执行输出文件的入口点到 <span class="italic">Label</span>。缺省入口点是 <span class="bold">__start</span>（双下划线 <span class="bold">start</span>）。</td>
</tr>
<tr>
<td>
<a id="a5rmzf231clif" name="a5rmzf231clif"></a><span class="bold">-f</span><span class="italic">FileID</span></td>
<td>  指定包含要处理的输入文件列表<span class="italic">。</span> FileID 必须包含输入文件名列表。FileID 中的每一行就象在 <span class="bold">ld</span> 命令行中分别列出那样被处理。文件中的行包含 shell 模式字符*（星号）、
[（左括弧）、]（右括弧）和 ? （问号），可以使用 <span class="bold">glob</span> 子例程进行扩展并且能指定多个对象代码。</td>
</tr>
<tr>
<td>
<a id="a3c4f276668stue" name="a3c4f276668stue"></a><span class="bold">-G</span></td>
<td>  产生与运行时链接程序一起工作的共享对象。
<span class="bold">-G</span>标记等价与指定带有<span class="bold">-b</span>标记的 <span class="bold">erok</span>、<span class="bold">rtl</span>、<span class="bold">nortllib</span>、<span class="bold">nosymbolic</span>、<span class="bold">noautoexp</span> 和 <span class="bold">M:SRE</span>选项。后继选项可以覆盖这些选项。</td>
</tr>
<tr>
<td>
<a id="jhmzf32clif" name="jhmzf32clif"></a><span class="bold">-H</span><span class="italic">Number</span></td>
<td>   对齐输出文件的文本、数据和装入程序部分，以致每个部分在是 <span class="italic">Number</span> 倍数的文件偏移量处开始。如果指定数是 1，则不会对齐。如果指定数是 0，装入程序部分在单词边界对齐，文本和数据在边界对齐来确保各部分的所有 CSECT 对齐。缺省值是 0。
<a name="d7cb2a5759jani"></a>
<p id="d7cb2a5759jani">如果指定的 <span class="italic">Number</span> 引起输出文件内的任何 CSECT 不对齐， <span class="bold">ld</span>命令发出一个警告并且可能不能装入或运行输出可执行文件。</p></td>
</tr>
<tr>
<td>
<a id="cimzf17aclif" name="cimzf17aclif"></a><span class="bold">-K</span></td>
<td>  对齐输出文件的头、文本、数据和装入程序部分以致每一部分从页面边界处开始。标记等价与指定 <span class="bold">-H</span><span class="italic">Number</span>，此处<span class="italic">Number</span> 是运行 <span class="bold">ld</span> 的机器上的页面大小。</td>
</tr>
<tr>
<td>
<a id="a09493c2" name="a09493c2"></a><span class="bold">-l</span><span class="italic">Name</span></td>
<td>  在动态方式下，处理 <span class="bold"><span class="italic">libName</span>.so</span> 或 <span class="bold"><span class="italic">libName</span>.a</span> 文件。在所有情况下都将搜索由 <span class="bold">-L</span> 标志指定或位于标准库目录（<span class="bold">/usr/lib</span> 和 <span class="bold">/lib</span>）中的目录以查找该文件。在动态方式下，包含 <span class="bold"><span class="italic">libName</span>.so</span> 或 <span class="bold"><span class="italic">libName</span>.a</span> 的第一个目录满足该搜索。如果在同一个目录中同时找到了这两个文件，则使用 <span class="bold"><span class="italic">libName</span>.a</span>。要首选 <span class="bold"><span class="italic">libName</span>.so</span>，还必须指定 <span class="bold">rtl</span> 选项。可以重复使用此标记。关于选项的更多信息，请参阅 <a href="ld.htm#od8hn182mart">运行时链接</a>。
<a name="wq478"></a>
<div class="notetitle" id="wq478">注:</div>
<div class="notebody">即使在读取压缩文档时没有符号的引用，也要保留符号的初始定义。在<span class="bold">ld</span> 命令的其它版本中，如果读取归档时没有符号的引用，忽略定义在归档中的符号。</div></td>
</tr>
<tr>
<td>
<a id="a09493c3" name="a09493c3"></a><span class="bold">-L</span><span class="italic">Directory</span></td>
<td>  添加 <span class="italic">Directory</span> 到用于查找库的搜索目录列表，库由 <span class="bold">-l</span>（小写字母 L）标记指定。目录列表包含标准库目录，如果不使用 <span class="bold">-blibpath</span> 或 <span class="bold">-bnolibpath</span> 选项，在输出对象代码装入程序部分记录目标列表以供系统装入程序使用。可以重复使用此标记。</td>
</tr>
<tr>
<td>
<a id="aimzfddclif" name="aimzfddclif"></a><span class="bold">-m</span> 或<span class="bold"> -M</span></td>
<td>  将创建输出文件所要处理的所有文件的名称和归档成员列到标准输出。不列出共享对象和导入文件。</td>
</tr>
<tr>
<td>
<a id="jjmzf1fbclif" name="jjmzf1fbclif"></a><span class="bold">-o</span><span class="italic">Name</span></td>
<td>  命名输出文件为 <span class="italic">Name</span>。缺省情况下，输出文件名是 <span class="bold">a.out</span>。</td>
</tr>
<tr>
<td>
<a id="kkmzf185clif" name="kkmzf185clif"></a><span class="bold">-r</span></td>
<td>  产生在另一个<span class="bold"> ld</span>命令调用中作为输入文件使用的非可执行的输出文件。文件可能包含非解析的符号。 <span class="bold">-r</span> 标记等价于指定带有<span class="bold">-b</span> 标记的 <span class="bold">erok</span>、<span class="bold">noglink</span>、<span class="bold">nox</span>和 <span class="bold">nogc</span> 选项。（后继选项覆盖这些选项。）</td>
</tr>
<tr>
<td>
<a id="nmmzffcclif" name="nmmzffcclif"></a><span class="bold">-s</span></td>
<td>  当创建输出文件时，移除符号表、行号信息和重定位信息。移除保留空格但不妨碍调试器的使用。可以使用 <span class="bold">strip</span> 命令移除现有的可执行文件。
<a name="wq479"></a>
<div class="notetitle" id="wq479">注:</div>
<div class="notebody">如果被移除，非共享对象不能链接。共享对象可以移除，但当静态链接时不能使用一个移除的共享对象。</div></td>
</tr>
<tr>
<td>
<a id="anmzf224clif" name="anmzf224clif"></a><span class="bold">-S</span><span class="italic">Number</span></td>
<td>  当运行输出的可执行程序时，设置允许用户堆栈使用的最大大小（用字节表示）。此值保存在辅助头中，由系统装入程序使用来设置 <a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/aixuser/usrosdev/korn_builtin_cmds.htm#a265913ec">soft ulimit</a>。缺省值是<span class="bold">0</span>。
<a name="e5b7150819mart"></a>
<p id="e5b7150819mart">关于大用户堆栈和 32 位程序的更多信息，请参阅 『Large
Program Support Overview』<span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span>。</p></td>
</tr>
<tr>
<td>
<a id="znmzfe9clif" name="znmzfe9clif"></a><span class="bold">-T</span><span class="italic">Number</span></td>
<td>  设置输出文件的文本部分的开始地址到 <span class="italic">Number</span>。缺省值是 <span class="bold">0</span>。
<a name="wq480"></a>
<div class="notetitle" id="wq480">注:</div>
<div class="notebody">在运行时系统装入程序重定位文本部分，因此指定的数字仅影响列在地址映射或由实用程序诸如 <span class="bold">nm</span> 或  <span class="bold">dump</span>命令打印的地址。</div></td>
</tr>
<tr>
<td>
<a id="rwkni3c8harr" name="rwkni3c8harr"></a><span class="bold">-u</span><span class="italic">Name</span></td>
<td>  防止外部的符号 <span class="italic">Name</span> 的垃圾收集。如果指定的符号不存在，将报告一个警告。
可以重复使用此标记。</td>
</tr>
<tr>
<td>
<a id="wnmzf23aclif" name="wnmzf23aclif"></a><span class="bold">-v</span></td>
<td>  写关于 loadmap 文件的绑定程序命令执行的附加信息。</td>
</tr>
<tr>
<td>
<a id="a1qmzf1a4clif" name="a1qmzf1a4clif"></a><span class="bold">-z</span></td>
<td>  功能与<span class="bold"> -K</span> 标记一样。</td>
</tr>
<tr>
<td>
<a id="ipmzf3beclif" name="ipmzf3beclif"></a><span class="bold">-Z</span><span class="italic">String</span></td>
<td>   当搜索由<span class="bold"> -l</span>（小写字母 L）标记指定的库时，以 <span class="italic">String</span> 作为标准库目录名称的前缀。例如，用<span class="bold">-Z/</span><span class="italic">test</span> 和 <span class="bold">-l</span><span class="italic">xyz</span> 标记，<span class="bold">ld</span> 命令查找 <span class="bold"> /test/usr/lib/libxyz.a</span> 和 <span class="bold">/test/lib/libxyz.a</span> 文件。当使用 <span class="bold">-Z</span><span class="italic">String</span> 标记时，不搜索标准库目录。
标记对存储在输出文件的装入程序部分的库路径没有影响。当开发库的新版本时，标记是有用的。 可以重复使用此标记。</td>
</tr>
</tbody>
</table>
<a name="a09493a7"></a>
<h3 id="a09493a7">绑定程序</h3><a id="idx225" name="idx225"></a><a id="idx226" name="idx226"></a>
<a name="e5b7151901mart"></a>
<p id="e5b7151901mart"><span class="bold">ld</span> 命令验证命令行参数和调用绑定程序（缺省情况下是 <span class="bold">/usr/ccs/bin/bind</span>文件），传递绑定程序子命令的生成列表。绑定程序实际上与文件相链接。 尽管绑定程序通常由 <span class="bold">ld</span>命令调用，但能直接启动绑定程序。在这种情况下，绑定程序从标准输入中读取命令。</p>
<a name="e5b7152053mart"></a>
<p id="e5b7152053mart">两个选项影响绑定程序的调用。<span class="bold">binder</span> 指定调用哪一个绑定程序，<span class="bold">nobind</span> 选项防止<span class="bold">ld</span> 命令调用绑定程序。其它绑定程序选项影响生成的绑定程序子命令。</p>
<a name="e5b7152274mart"></a>
<p id="e5b7152274mart">如果 <span class="bold">ld</span> 命令在选项或命令行参数中没有检测到任何错误，将调用绑定程序。 以命令行的格式调用绑定程序：</p>
<p></p>
<pre class="xmp"><span class="italic">bind [quiet_opt] [loadmap_opt]</span></pre>
<a name="e5b7152495mart"></a>
<p id="e5b7152495mart"><span class="italic">quiet_opt</span> 的缺省值是 <tt>quiet</tt>，<span class="italic">loadmap_opt</span> 缺省值是空串，所以缺省命令行是：</p>
<p></p>
<a name="d7cb2a7431jani"></a>
<pre id="d7cb2a7431jani" class="xmp">/usr/ccs/bin/bind quiet</pre>
<a name="xpudj83amy"></a>
<h4 id="xpudj83amy">选项（-bOptions）</h4><a id="idx227" name="idx227"></a><a id="idx228" name="idx228"></a>
<a name="e5b7152775mart"></a>
<p id="e5b7152775mart">对于 <span class="bold">-b</span> 标记的 <span class="italic">Options</span> 变量，下列值是可能的。在 <span class="bold">-b</span> 标记后用一个空格将超过一个的选项分开列出。</p>
<a name="wq481"></a>
<div class="notelisttitle" id="wq481">注:</div>
<ol type="1">
<li>在绑定程序选项的下列列表里，用单词 <span class="italic">or</span> 分开的两个选项名称名称是同义的。</li>
<li><span class="italic">FileID</span>表示路径名称。可以使用相对的或完整的路径名。</li>
<li>对于在参数之前的不能重复的选项，可以使用空参数取消选项。也就是说，仅指定选项和冒号。</li>
<li>如果选项冲突，最后一个选项优先。</li>
</ol>
<a name="a3c4f276769stue"></a>
<p id="a3c4f276769stue"></p>
<p></p>
<a name="wq483"></a>
<table id="wq483" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="22%"><span class="bold">32</span></td>
<td width="77%"> 指定 32 位链接方式。在这种方式下，所有输入对象代码必须是 XCOFF32 文件，否则会报告错误。忽略 XCOFF64 归档成员。对于指定了特定符号的方式的导入或导出文件，忽略 64 位符号。如果同时指定了<span class="bold">-b32</span> 和 <span class="bold">-b64</span> 选项，使用最后指定的选项。如果没有指定选项，从环境变量 <a href="ld.htm#i0820970733mikm"><span class="bold">OBJECT_MODE</span></a> 的值确定方式。</td>
</tr>
<tr>
<td><span class="bold">64</span></td>
<td>指定 64 位链接方式。在这种方式下，所有输入对象代码必须是 XCOFF64 文件，否则会报告错误。忽略 XCOFF32 归档成员。对于指定了特定符号的方式的导入或导出文件，忽略 32 位符号。如果同时指定了 <span class="bold">-b32</span> 和 <span class="bold">-b64</span> 选项，使用最后指定的选项。如果没有指定选项，从环境变量 <span class="bold">OBJECT_MODE</span> 的值确定方式。</td>
</tr>
<tr>
<td>
<a id="a09493a4" name="a09493a4"></a><span class="bold">asis</span></td>
<td>  处理所有混合大小写的外部符号。这是缺省值。处理所有大写的外部符号，请参阅下面的 <span class="bold">caps</span> 选项。</td>
</tr>
<tr>
<td>
<a id="a3c4f276782stue" name="a3c4f276782stue"></a><span class="bold">autoexp</span></td>
<td>  自动地从输出模块中导出一些符号，不必在导出文件中列出它们。（此选项不从输出模块中导出所有符号。使用 <span class="bold">-bexpall</span> 选项导出所有符号。） 这是缺省值。链接主程序时使用此选项。链接程序假定没有指定以 <tt>S</tt> 开头的模块类型（使用 <span class="bold">M</span> 或 <span class="bold">modtype</span> 选项）时正在链接主程序，并且没有使用 <span class="bold">noentry</span> 选项。
<a name="a3c4f276794stue"></a>
<p id="a3c4f276794stue">当使用 <span class="bold">autoexp</span> 选项时，如果列在命令行中的任何共享对象从特定文件导入符号 <span class="bold">.</span>（点），并且链接模块包含符号的本地定义，将自动导出符号。</p> 
<a name="a3c4f276807stue"></a>
<p id="a3c4f276807stue">当用<span class="bold">rtl</span> 选项链接时，其它符号自动导出。如果定义在链接的模块里的符号有从列在命令行上的共享对象导出的一个或多个附加定义并且任意定义是 BSS 符号时，自动导出符号。如果链接的模块里的定义是 BSS 符号时，符号是以 <tt>nosymbolic</tt> 属性导出的。否则，符号以 <tt>symbolic</tt> 属性导出。如果符号以其它的导出属性列在导出文件里，使用显式属性。</p> 
<a name="a3c4f276819stue"></a>
<p id="a3c4f276819stue">如果<span class="bold">autoexp</span> 选项自动地导出符号，但以 <span class="bold">list</span> 属性列在导出的文件中，则不导出符号。</p></td>
</tr>
<tr>
<td>
<a id="c1cbe3e796joy" name="c1cbe3e796joy"></a><span class="bold">autoimp</span> 或 <span class="bold"> so</span></td>
<td>  从指定作为输入文件的任意共享对象中导入符号。
共享对象被引用，但不作为输出对象代码的一部分被包含。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="d7cb2a7831jani" name="d7cb2a7831jani"></a><span class="bold">autoload：</span> <span class="italic">path/file(member)</span></td>
<td>当使用<span class="bold">-brtl</span> 选项时自动装入归档成员。</td>
</tr>
<tr>
<td><span class="bold">bigtoc</span></td>
<td>  如果目录表的大小（TOC）比 64KB 大，将生成额外代码。对于不能以 16 位偏移量寻址的 TOC 符号的每个引用都需要额外代码。因为包含生成代码的程序性能可能较低，所以需要在使用选项之前减少程序需要的 TOC 项目数。缺省是<span class="bold">nobigtoc</span>选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe3e889joy" name="c1cbe3e889joy"></a><span class="bold">bindcmds:</span><span class="italic">FileID</span></td>
<td>  把由<span class="bold"> ld</span>命令生成的绑定程序命令的拷贝写到<span class="italic"> FileID</span>。当绑定程序作为单机程序调用时，可以重定向生成文件作为到绑定程序的标准输入。缺省情况下，不产生文件。</td>
</tr>
<tr>
<td>
<a id="c1cbe3e982joy" name="c1cbe3e982joy"></a><span class="bold">binder:</span><span class="italic">FileID</span></td>
<td>  使用 <span class="italic">FileID</span> 作为绑定程序，由<span class="bold"> ld</span> 命令调用。缺省绑定程序是<span class="bold">/usr/ccs/bin/bind</span> 文件<span class="italic">。</span></td>
</tr>
<tr>
<td>
<a id="c1cbe3f076joy" name="c1cbe3f076joy"></a><span class="bold">bindopts:</span><span class="italic">FileID</span></td>
<td>  写绑定程序程序参数的拷贝到<span class="italic">FileID</span>。可以使用生成的文件启动作为单机程序的绑定程序程序。缺省情况下，不产生文件。</td>
</tr>
<tr>
<td>
<a id="d7cb2a7958jani" name="d7cb2a7958jani"></a><span class="bold">C:</span><span class="italic">FileID</span> 或 <span class="bold">calls:</span><span class="italic">FileID</span></td>
<td>  写输出对象代码的地址映射到<span class="italic">FileID。</span> 先按段和后按地址排序符号。对于列在映射中的每个符号，列出了从这个符号到另一个符号的引用。缺省情况下，不产生文件。学习有关<span class="bold"> calls</span> 选项的更多信息，请参阅<a href="ld.htm#vcc7h308jbau">地址映射</a>。</td>
</tr>
<tr>
<td>
<a id="c1cbe3f268joy" name="c1cbe3f268joy"></a><span class="bold">caps</span></td>
<td>  处理所有大写的外部符号。缺省是<span class="bold">asis</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe3f357joy" name="c1cbe3f357joy"></a><span class="bold">comprld</span> 或<span class="bold">crld</span></td>
<td>  可能的话，连接同一地址上的多个重定位项（RLD）到单一的 RLD。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe3f441joy" name="c1cbe3f441joy"></a><span class="bold">cror15</span></td>
<td>  使用 <span class="bold">cror 15，15，15</span>（<tt>0x4def7b82</tt>）指令作为调用指令后的特殊 no-op 指令。缺省值是 <span class="bold">ori 0，0，0</span> （<tt>0x60000000</tt>）。请参阅 <span class="bold">nop</span> 选项。
<a name="a3c4f276841stue"></a>
<p id="a3c4f276841stue">当链接在 AIX 3.1上要重新链接的系统当前级别的链接对象代码时，使用此选项。</p></td>
</tr>
<tr>
<td>
<a id="a155c139e" name="a155c139e"></a><span class="bold">cror31</span></td>
<td>  使用 <span class="bold">cror 31，31，31</span>（<tt>0x4ffffb82</tt>）指令作为调用指令后的特殊 no-op 指令。缺省值是<span class="bold">ori 0， 0，0</span>（<tt>0x60000000</tt>）。请参阅 <span class="bold">nop</span> 选项。
<a name="a3c4f276861stue"></a>
<p id="a3c4f276861stue">当链接在 AIX 3.2上要重新链接的系统当前级别的链接对象代码时，使用此选项。</p></td>
</tr>
<tr>
<td>
<a id="c1cbe3f655joy" name="c1cbe3f655joy"></a><span class="bold">D:</span> <span class="italic">Number</span> [/<span class="italic">dsa</span>] 或 <span class="bold">maxdata:</span><span class="italic">Number</span>[/<span class="italic">dsa</span>]</td>
<td>当运行可执行程序时，设置允许用户域（用户堆）使用的最大大小（用字节表示）。此值保存在辅助头中，由系统装入程序使用来设置软件数据 ulimit。缺省值是 0。当使用此选项时，为用户数据域保存指定的字节数。程序不能显式地将使用<span class="bold">shmat</span> 或 <span class="bold">mmap</span> 函数的对象映射到为用户数据域保留的虚拟地址。
<p>对于 32 位程序，运行在大程序支持下的系统允许的最大值是 <tt class="xph">0x80000000</tt>，运行在超大程序支持下的系统允许最大值是 <tt class="xph">0xD0000000</tt>。请参阅在 <span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span> 上的 『Large Program Support Overview』。当指定非零值时，用户数据域在第 3 段开始，程序使用需要的段来满足指定的 <span class="bold">maxdata</span> 值。</p>
<p>对于 64 位程序，<span class="bold">maxdata</span> 选项提供了程序数据堆的保证的最大大小。可以指定任意值但不管指定的最大数据值的大小如何，数据域都不能超过 <tt class="xph">0x06FFFFFFFFFFFFF8</tt>。</p></td>
</tr>
<tr>
<td>
<a id="c1cbe3f750joy" name="c1cbe3f750joy"></a><span class="bold">dbg</span>:<span class="italic">Option</span> 或 <span class="bold">debugopt</span>:<span class="italic">Option</span></td>
<td>  设置特定调试或控制选项。缺省情况下，不设置调试选项。
<a name="a3c4f276913stue"></a>
<p id="a3c4f276913stue">使用 <span class="bold">dbg:loadabs</span> 或 <span class="bold">debugopt:loadabs</span> 选项表示在由 <span class="bold">-T</span> 和 <span class="bold">-D</span> 标志指定的同一地址上装入输出程序。在此情况下，不改变绝对分支指令到（相对）分支指令，即使其目标是可重新定位的符号。类似地，也从不将分支指令改变成绝对分支指令。</p></td>
</tr>
<tr>
<td>
<a id="c1cbe3f843joy" name="c1cbe3f843joy"></a><span class="bold">delcsect</span></td>
<td>  如果 CSECT 中的符号由预先读对象代码定义，那么删除 CSECT 中的所有符号。此选项防止同一程序上出现不止一个的相同函数的实例。例如，如果<span class="bold">a.o</span> 定义函数 <span class="bold">a()</span>，<span class="bold">b.o</span> 定义函数 <span class="bold">a()</span> 和 <span class="bold">b()</span>，用 <span class="bold">-bdelcsect</span> 选项链接 <span class="bold">a.o</span> 和 <span class="bold">b.o</span> 从<span class="bold">b.o</span> 中删除符号 <span class="bold">a()</span> 和 <span class="bold">b()</span>。这样，<span class="bold">a()</span> 的两个实例不存在了。缺省值是 <span class="bold">nodelcsect</span> 选项。</td>
</tr>
<tr>
<td>
<a id="km8kn154mart" name="km8kn154mart"></a><span class="bold">dynamic</span> 或 <span class="bold">shared</span></td>
<td>  导致链接程序用动态方式处理后继共享对象。这是缺省值。动态方式下，共享对象不是静态包含在输出文件下的。相反，共享对象列在输出文件的装入程序部分。当指定<span class="bold">rtl</span> 选项和动态方式正在运行时，以 <span class="bold"> .so</span> 和 <span class="bold">.a</span> 结尾的文件满足 <span class="bold">-l</span>（小写字母 L）标志指定的库搜索。如果这两者都生效了，而同一个目录中同时存在 <span class="bold">.so</span> 和 <span class="bold">.a</span>，则首选前者，而不是后者。否则，如果仅设置了动态，而没有设置 <span class="bold">rtl</span>，将首选 <span class="bold">.a</span>，而不是 <span class="bold">.so</span>。</td>
</tr>
<tr>
<td>
<a id="c1cbe3f930joy" name="c1cbe3f930joy"></a><span class="bold">E:</span><span class="italic">FileID</span> 或 <span class="bold">export:</span><span class="italic">FileID</span></td>
<td>   导出列在文件 <span class="italic">FileID 中的外部的符号。</span>已导出的符号列在输出文件的装入程序部分。没有缺省的导出文件。</td>
</tr>
<tr>
<td>
<a id="c1cbe40022joy" name="c1cbe40022joy"></a><span class="bold">ernotok</span> 或 <span class="bold">f</span></td>
<td>  如果有任意未解析的外部引用，将报告错误。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe40112joy" name="c1cbe40112joy"></a><span class="bold">erok</span></td>
<td>  产生无错误的输出对象代码，即使有未解析的外部引用。缺省值是 <span class="bold">ernotok</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe40196joy" name="c1cbe40196joy"></a><span class="bold">errmsg</span></td>
<td>  如果信息的错误级别高于或等同于 <span class="bold">halt</span> 选项值并且使用 <span class="bold">quiet</span> 选项或重定向标准输出，将错误消息写到标准错误。这是缺省值。</td>
</tr>
<tr>
<td><span class="bold">ex1:</span><span class="italic">FileID</span>，<span class="bold">ex2:</span><span class="italic">FileID</span>，<span class="bold">ex3：</span><span class="italic">FileID</span>，<span class="bold">ex4：</span><span class="italic">FileID</span> 和 <span class="bold">ex5:</span><span class="italic">FileID</span></td>
<td>  在典型的绑定程序子命令序列中提供用户出口。由 <span class="italic">FileID</span> 指定的每个文件必须包含绑定程序子命令列表，它将按如下运行：
<dl>
<dt id="e5b7158141mart" class="bold">
<a name="e5b7158141mart"></a><span class="bold">ex1:</span><span class="italic">FileID</span></dt>
<dd>  在读取任意 <span class="italic">InputFiles</span> 之前
</dd>
<dt id="e5b7158240mart" class="bold">
<a name="e5b7158240mart"></a><span class="bold">ex2:</span><span class="italic">FileID</span></dt>
<dd>  紧靠符号分辨率之前
</dd>
<dt id="e5b7158338mart" class="bold">
<a name="e5b7158338mart"></a><span class="bold">ex3:</span><span class="italic">FileID</span></dt>
<dd>  紧跟符号分辨率之后
</dd>
<dt id="e5b7158437mart" class="bold">
<a name="e5b7158437mart"></a><span class="bold">ex4:</span><span class="italic">FileID</span></dt>
<dd>  紧跟写输出文件前
</dd>
<dt id="e5b7158535mart" class="bold">
<a name="e5b7158535mart"></a><span class="bold">ex5:</span><span class="italic">FileID</span></dt>
<dd>  紧跟写输出文件后
</dd>
</dl></td>
</tr>
<tr>
<td>
<a id="a3c4f277349stue" name="a3c4f277349stue"></a><span class="bold">expall</span></td>
<td>  导出全部全局符号，除了导入的符号，定义在归档成员中的未引用的符号和以下划线开始的符号（_）。可以通过在导出的文件里列出它们导出附加符号。此选项不影响由 <span class="bold">autoexp</span> 选项导出的符号。
<a name="a3c4f277360stue"></a>
<p id="a3c4f277360stue">当使用此选项，能避免使用导出的文件。另一方面，使用导出文件提供导出符号上的显式控制，并且允许使用其它共享对象内的全局符号不必当心与其他共享对象导出的名称冲突。缺省值是 <span class="bold">noexpall</span>。</p></td>
</tr>
<tr>
<td>
<a id="c1cbe40761joy" name="c1cbe40761joy"></a><span class="bold">export:</span><span class="italic">FileID</span></td>
<td>  功能与 <span class="bold">E:</span><span class="italic">FileID</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe40839joy" name="c1cbe40839joy"></a><span class="bold">f</span></td>
<td>  功能与 <span class="bold">ernotok</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe41035joy" name="c1cbe41035joy"></a><span class="bold">gc</span></td>
<td>  执行垃圾收集。使用 <span class="bold">nogc</span>，<span class="bold">gcbypass</span> 或 <span class="bold">keepfile</span> 选项防止一些或所有对象代码的垃圾收集。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe41132joy" name="c1cbe41132joy"></a><span class="bold">gcbypass:</span><span class="italic">Number</span></td>
<td>  如果指定 <span class="bold">gc</span> 选项当垃圾收集时指定忽略的文件个数。如果使用 <span class="bold">nogc</span> 选项，忽略此选项。如果 <span class="italic">Number</span> 是 0，此选项等同于 <span class="bold">gc</span> 选项并且执行所有文件的垃圾收集。缺省值是 <span class="bold">0</span>。</td>
</tr>
<tr>
<td>
<a id="c1cbe41226joy" name="c1cbe41226joy"></a><span class="bold">glink:</span><span class="italic">FileID</span></td>
<td>  使用由 <span class="italic">FileID 指定的全局链接原型代码。</span>生成每个导入或未定义的函数的全局链接界面。在 32 位方式中，缺省值是 <span class="bold">/usr/lib/glink.o</span> 文件。在 64 位方式中，缺省值是 <span class="bold">/usr/lib/glink64.o</span> 文件。</td>
</tr>
<tr>
<td>
<a id="c1cbe41324joy" name="c1cbe41324joy"></a><span class="bold">h:</span><span class="italic">Number</span> 或 <span class="bold">halt:</span><span class="italic">Number</span></td>
<td>  指定绑定程序命令继续处理的最大错误级。缺省值是 <span class="bold">4</span>。如果任意绑定程序子命令的返回值大于 <span class="italic">Number</span>值，不处理附加绑定程序子命令。如果停机级别值是 8 或更大，则生成的文件是不能执行的。返回值是：
<dl>
<dt id="c1cbe41396joy" class="bold">
<a name="c1cbe41396joy"></a><span class="bold">0</span></dt>
<dd>  无错误
</dd>
<dt id="c1cbe41480joy" class="bold">
<a name="c1cbe41480joy"></a><span class="bold">4</span></dt>
<dd>  警告
</dd>
<dt id="c1cbe41560joy" class="bold">
<a name="c1cbe41560joy"></a><span class="bold">8</span> </dt>
<dd>  错误
</dd>
<dt id="c1cbe41641joy" class="bold">
<a name="c1cbe41641joy"></a><span class="bold">12</span></dt>
<dd>  严重错误
</dd>
<dt id="c1cbe41719joy" class="bold">
<a name="c1cbe41719joy"></a><span class="bold">16</span></dt>
<dd>  内部程序错误
</dd>
</dl></td>
</tr>
<tr>
<td>
<a id="c1cbe41903joy" name="c1cbe41903joy"></a><span class="bold">I:</span><span class="italic">FileID</span> 或<span class="bold"> import:</span><span class="italic">FileID</span></td>
<td>  （大写字母 i）导入列在 <span class="italic">FileID</span> 中的符号。没有缺省的导入文件。</td>
</tr>
<tr>
<td>
<a id="a3c4f277388stue" name="a3c4f277388stue"></a><span class="bold">initfini:</span>[ <span class="italic">Initial</span>] [<span class="bold">:</span><span class="italic">Termination</span>]
[<span class="bold">:</span><span class="italic">Priority</span>]</td>
<td>  指定模块的初始化和模块的终止函数，此处 <span class="italic">Initial</span> 是初始化例程，<span class="italic">Termination</span> 是终止例程，<span class="italic">Priority</span> 是有符号整数，值从 -2,147,483,648 到 2,147,483,647。必须至少指定 <span class="italic">Initial</span> 和<span class="italic">Termination</span> 中的一个，如果省略了 <span class="italic">Termination</span> 和 <span class="italic">Priority</span>，必须也省略<span class="italic">Initial</span> 后的冒号。如果没有指定 <span class="italic">Priority</span>，0 是缺省值。可以重复选项。
<p>此选项以优先级排序例程，以最小的（大多数是负数）优先级开始。按顺序调用初始化例程，以相反顺序终止例程。</p>
<p>此选项以未指定顺序调用相同优先级的调用例程，但如果多个 <span class="bold">initfini</span> 选项指定了相同的优先级，且同时指定了初始化和终止例程，则保持例程的相关顺序。例如，如果指定了选项 <span class="bold">initfini:i1:f1</span> 和 <span class="bold">initfini:i2:f2</span>，
那么以未指定的顺序调用<span class="bold">i1</span> 和 <span class="bold">i2</span>，但当加载模块时如果在<span class="bold">i2</span> 之前调用 <span class="bold">i1</span>，当未加载时将在 <span class="bold">f1</span> 之前调用<span class="bold">f2</span>。</p>
<a name="wq484"></a>
<div class="notetitle" id="wq484">注:</div>
<div class="notebody">IBM 将仅使用下列范围值中的优先级：
<pre class="xmp">-2,147,483,640 to -2,147,000,000
-1,999,999,999 to -1,000,000,000
-1,999,999,999 to -1,000,000,000
   -99,999,999 to -50,000,000
             0
    50,000,000 to 99,999,999
 1,000,000,000 to 1,999,999,999
 2,147,000,000 to 2,147,483,640</pre></div></td>
</tr>
<tr>
<td>
<a id="a3c4f277446stue" name="a3c4f277446stue"></a><span class="bold">ipath</span></td>
<td>  对于列在命令行中的共享对象，不是用 <span class="bold">-l</span> 标记指定共享对象，而当在输出文件的装入程序部分列出共享对象时使用路径组件。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="d7cb2a9935jani" name="d7cb2a9935jani"></a><span class="bold">keepfile:</span><span class="italic">FileID</span></td>
<td>  防止 <span class="italic">FileID</span> 的垃圾收集。缺省情况下，绑定程序删除所有全部文件里未引用的 CSECTS。可以重复使用此选项。</td>
</tr>
<tr>
<td>
<a id="a3c4f277459stue" name="a3c4f277459stue"></a><span class="bold">lazy</span></td>
<td>  启用模块的从属模块的迟缓装入。此选项在其它标记后添加 <span class="bold">-lrtl</span> 标记和选项。如果指定<span class="bold">-brtl</span> 选项，忽略<span class="bold">-blazy</span> 选项并且禁用迟缓装入。
<a name="a3c4f277471stue"></a>
<p id="a3c4f277471stue">当链接模块时，在模块的装入程序部分保存从属模块的列表。在装入模块后系统装入程序自动地装入从属模块。启用迟缓装入时，延迟一些从属模块的装入直到在第一时间调用模块里的函数。</p>
<a name="a3c4f277482stue"></a>
<p id="a3c4f277482stue">当模块的所有引用是函数调用时，迟缓装入模块。如果模块里的变量是引用的，那么将以典型方式装入模块。</p>
<a name="wq485"></a>
<div class="notetitle" id="wq485">注:</div>
<div class="notebody">如果使用迟缓装入当比较函数指针时应小心。通常，函数有唯一的地址比较两个函数指针确定是否指向同一函数。当使用迟缓装入链接模块时，迟缓装入模块的函数地址与其它模块计算的地址不一样。依赖于函数指针比较的程序应该不使用迟缓装入。</div>
<a name="a3c4f277506stue"></a>
<p id="a3c4f277506stue">关于迟缓装入的更多信息，请参阅 『Shared Librariesand
Lazy Loading』<span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span>。</p></td>
</tr>
<tr>
<td>
<a id="c1cbe42086joy" name="c1cbe42086joy"></a><span class="bold">l:</span><span class="italic">FileID</span> 或 <span class="bold">loadmap:</span><span class="italic">FileID</span></td>
<td>  （小写字母 L）将每个绑定程序子命令和结果写到 <span class="italic">FileID。</span> 缺省情况下，不产生文件。</td>
</tr>
<tr>
<td>
<a id="d7cb2aa117jani" name="d7cb2aa117jani"></a><span class="bold">libpath:</span><span class="italic">Path</span></td>
<td>  当写输出文件的装入程序部分时，使用 <span class="italic">Path</span> 作为库路径。当搜索由 <span class="bold">-l</span> 标记指定的库时，<span class="italic">Path</span> 既不作有效性检查也不被使用。当使用 <span class="bold">-L</span> 标记时，<span class="italic">Path</span> 覆盖生成的任意库路径。
<a name="a3c4f277520stue"></a>
<p id="a3c4f277520stue">如果不指定任何 <span class="bold">-L</span> 标记或指定 <span class="bold">nolibpath</span> 选项，在输出文件的装入程序部分中写入缺省库路径信息。缺省库路径信息是 <a href="ld.htm#df5e0bd128mich"><span class="bold">LIBPATH</span></a> 环境变量的值（如果定义的话），否则就是<span class="bold">/usr/lib:/lib</span>。</p></td>
</tr>
<tr>
<td>
<a id="d7cb2aa194jani" name="d7cb2aa194jani"></a><span class="bold">loadmap:</span><span class="italic">FileID</span></td>
<td>  功能与 <span class="bold">l:</span><span class="italic">FileID</span> 选项一样。</td>
</tr>
<tr>
<td><span class="bold">m:</span><span class="italic">UR</span></td>
<td>为链接程序设置 <span class="bold">SGETUREGS</span> 标志。当设置了 <span class="bold">SGETUREGS</span> 标志时，寄存器的内容存储在缓冲区里。通过<span class="bold">coredump</span> 系统调用使用此选项。</td>
</tr>
<tr>
<td>
<a id="d7cb2aa233jani" name="d7cb2aa233jani"></a><span class="bold">M:</span><span class="italic">ModuleType</span> 或 <span class="bold">modtype:</span><span class="italic">ModuleType</span></td>
<td>  在对象代码中设置两字符的模块类型域和共享对象标记。绑定程序不检查模块类型，但应设置成下列值之一：
<dl>
<dt id="a0949384" class="bold">
<a name="a0949384"></a><span class="bold">1L</span></dt>
<dd>单独使用。模块需要每个装入数据部分的专用拷贝。
</dd>
<dt id="c1cbe42685joy" class="bold">
<a name="c1cbe42685joy"></a><span class="bold">RE</span></dt>
<dd>可重用的。模块需要依赖于模块的每个进程数据域的专用拷贝。
</dd>
</dl>
<dl>
<dt id="c1cbe42792joy" class="bold">
<a name="c1cbe42792joy"></a><span class="bold">RO</span></dt>
<dd>只读。模块是只读的，多个进程可以同时使用。
</dd>
<dt id="a3c4f277537stue" class="bold">
<a name="a3c4f277537stue"></a></dt>
<dd>如果在任意前述选项上使用 <span class="bold">S</span> 前缀，将设置对象代码里的共享标记。系统装入程序试图共享 RO 模块数据部分的单一实例。否则，系统装入程序忽略模块类型。缺省值是 <span class="bold">1L</span>。
</dd>
</dl></td>
</tr>
<tr>
<td>
<a id="c1cbe42178joy" name="c1cbe42178joy"></a><span class="bold">map:</span><span class="italic">FileID</span> 或 <span class="bold">R:</span><span class="italic">FileID</span></td>
<td>  将输出对象代码的地址映射写到<span class="italic">FileID。</span> 先按段和后按地址排序符号。缺省情况下，不产生文件。学习有关 <span class="bold">map</span> 选项的更多信息，请参阅 <a href="ld.htm#vcc7h308jbau">地址映射</a>。</td>
</tr>
<tr>
<td>
<a id="c1cbe42263joy" name="c1cbe42263joy"></a><span class="bold">maxdata:</span><span class="italic">Number</span>[/<span class="italic">dsa</span>]</td>
<td>   功能与 <span class="bold">D:</span><span class="italic">Number</span>[/<span class="italic">dsa</span>] 选项一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe42442joy" name="c1cbe42442joy"></a><span class="bold">maxstack</span>:<span class="italic">Number</span> 或 <span class="bold">S:</span><span class="italic">Number</span></td>
<td>  功能与 <span class="bold">-S</span> 标记一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe42534joy" name="c1cbe42534joy"></a><span class="bold">modtype:</span><span class="italic">ModuleType</span></td>
<td>  功能与 <span class="bold">M:</span><span class="italic">ModuleType</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe43042joy" name="c1cbe43042joy"></a><span class="bold">nl</span> 或 <span class="bold">noloadmap</span></td>
<td>  不将绑定程序子命令和结果写到装入映射文件。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="a3c4f277561stue" name="a3c4f277561stue"></a><span class="bold">noautoexp</span></td>
<td>  防止任意符号的自动导出。缺省值是<span class="bold">autoexp</span> 选项。</td>
</tr>
<tr>
<td>
<a id="a20095b8" name="a20095b8"></a><span class="bold">noautoimp</span> 或 <span class="bold">nso</span></td>
<td>  链接任意未移除的、共享的对象作为普通的对象代码。使用此选项时，不使用共享对象的装入程序部分。缺省值是 <span class="bold">autoimp</span> 或 <span class="bold">so</span> 选项。
<a name="wq486"></a>
<div class="notetitle" id="wq486">注:</div>
<div class="notebody">通过使用这些标记之一，可以将共享对象代码静态链接到应用程序。任意静态链接的应用程序<span class="italic">不</span>是可以从任意修正或发行版级别移植到其它修正或发行版级别上的二进制文件。</div></td>
</tr>
<tr>
<td>
<a id="d7cb2aa677jani" name="d7cb2aa677jani"></a><span class="bold">nobigtoc</span></td>
<td>  如果 TOC 的大小超过 64KB，将生成严重错误消息。如果生成输出文件，是不能直接执行。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe43197joy" name="c1cbe43197joy"></a><span class="bold">nobind</span></td>
<td>  省略调用绑定程序。相反地，<span class="bold">ld</span> 命令将绑定程序子命令的生成列表写到标准输出。缺省情况下，<span class="bold"> ld</span> 命令调用绑定程序。</td>
</tr>
<tr>
<td>
<a id="c1cbe43291joy" name="c1cbe43291joy"></a><span class="bold">nocomprld</span> 或 <span class="bold">nocrld</span></td>
<td>  不将同一地址的多个重定位项（RLD）组合到单一的 RLD。缺省值是 <span class="bold">comprld</span> 或 <span class="bold">crld</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe43384joy" name="c1cbe43384joy"></a><span class="bold">nodelcsect</span></td>
<td>  在符号分辨率中允许考虑 CSECT 里所有符号，即使 CSECT 里的一些符号已在先前的读对象代码中被定义。关于更多信息，请参阅 <span class="bold">delcsect</span> 选项。<span class="bold">nodelcsect</span> 选项是缺省值。</td>
</tr>
<tr>
<td>
<a id="a3c4f277579stue" name="a3c4f277579stue"></a><span class="bold">noexpall</span></td>
<td>  不导出符号，除非在导出的文件里列出它们或用 <span class="bold">autoexp</span> 选项导出它们。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="d7cb2ab054jani" name="d7cb2ab054jani"></a><span class="bold">noentry</span></td>
<td>  表示输出文件无入口点。保留任意需要的符号，用 <span class="bold">-u</span> 标记或导出的文件指定它们。可以使用 <span class="bold">-r</span> 标志或<span class="bold">nogc</span> 或 <span class="bold">gcbtpass</span> 选项保留一些或所有对象代码的所有外部符号。如果既不使用<span class="bold">noentry</span> 也不使用<span class="bold">nox</span> 选项并且找不到入口点，将发出警告。</td>
</tr>
<tr>
<td>
<a id="c1cbe43466joy" name="c1cbe43466joy"></a><span class="bold">noerrmsg</span></td>
<td>  不将错误消息写到标准错误。如果指定 <span class="bold">noquiet</span> 选项并且管道输出标准输出到诸如 <span class="bold">tee</span> 或 <span class="bold">pg</span> 的命令中，则使用此选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe43560joy" name="c1cbe43560joy"></a><span class="bold">nogc</span></td>
<td>  防止垃圾收集。保留包含全局符号的所有对象代码里的 CSECT，不管是否是引用的。缺省值是<span class="bold"> gc</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe43653joy" name="c1cbe43653joy"></a><span class="bold">noglink</span></td>
<td>  防止 <span class="bold">ld</span> 命令插入全局链接代码。缺省情况下，绑定程序插入全局链接代码。</td>
</tr>
<tr>
<td>
<a id="a3c4f277596stue" name="a3c4f277596stue"></a><span class="bold">noipath</span></td>
<td>  对于列在命令行中的共享对象，不是用 <span class="bold">-l</span> 标志指定共享对象，而是当列出在导出文件的装入程序部分的共享对象时使用空路径组件。为用 <span class="bold">-l</span> 标志指定的共享对象总是使用空路径组件。
此选项不影响通过使用在导入文件中以 <tt>#!</tt> 开头的行来指定路径组件。。缺省值是 <span class="bold">ipath</span> 选项。</td>
</tr>
<tr>
<td>
<a id="d7cb2ac349jani" name="d7cb2ac349jani"></a><span class="bold">nolibpath</span></td>
<td>  覆盖由<span class="bold"> -L</span> 标记生成或由 <span class="bold">libpath</span> 选项指定的先前库路径。相反，缺省库路径信息写在输出文件的装入程序部分。缺省库路径信息是 <span class="bold">LIBPATH</span> 环境变量的值（如果被定义的话），否则就是 <span class="bold">/usr/lib:/lib</span>。</td>
</tr>
<tr>
<td>
<a id="c1cbe43751joy" name="c1cbe43751joy"></a><span class="bold">noloadmap</span></td>
<td>  功能与 <span class="bold">nl</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="d7cb2ac689jani" name="d7cb2ac689jani"></a><span class="bold">nom</span></td>
<td>  不列出用于创建输出文件的对象代码。此选项覆盖 <span class="bold">-m</span> 标记。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe43853joy" name="c1cbe43853joy"></a><span class="bold">noobjreorder</span></td>
<td>  不使用深度优先 CSECT 重排序逻辑。输出文件里的 CSECT 以对象代码和库文件在命令行中指定的同样顺序排列，除了按下列方式：
<ul>
<li id="a105c13a8">
<a name="a105c13a8"></a>根据每个 CSECT 的存储映射类域，CSECT 被放置在其正确的文本、数据或对象代码的 BSS 区域中。</li>
<li id="c1cbe44015joy">
<a name="c1cbe44015joy"></a>所有带有 XMC_TC（TOC 地址常量）或 XMC_TD（TOC 变量）的存储映射类的 CSECT 被分在一起。</li></ul> 
<a name="a3c4f277614stue"></a>
<p id="a3c4f277614stue">如果同时指定了<span class="bold">noobjreorder</span> 和 <span class="bold">noreorder</span> 选项，<span class="bold">noreorder</span> 选项优先。缺省值是 <span class="bold">reorder</span> 选项。</p></td>
</tr>
<tr>
<td>
<a id="d7cb2ad169jani" name="d7cb2ad169jani"></a><span class="bold">nop:</span><span class="italic">Nop</span></td>
<td>  指定在到本地例程的分支后使用的 no-op 指令。<span class="italic">Nop</span> 可能是特定值<span class="bold">cror15</span>、<span class="bold">cror31</span> 或 <span class="bold">ori</span> 之一，或一个八位的十六进制数。<span class="bold">ori</span> 指令是缺省值。指定 <span class="bold">-bnop:cror15</span> 选项等同于指定 <span class="bold">-bcror15</span> 选项；指定<span class="bold">-bnop:cror31</span> 选项等同于指定 <span class="bold">-bcror31</span> 选项。如果指定了特定的<span class="bold">nop</span> 选项之一，将覆盖所有先前的 <span class="bold">nop</span> 选项。
<a name="a3c4f277634stue"></a>
<p id="a3c4f277634stue">如果 <span class="italic">Nop</span> 是一个八位的十六进制数，指定任意的机器指令。机器指令覆盖所有先前为 <span class="italic">Nop</span> 指令指定的特定值。当使用此格式时，可以重复此选项。</p> 
<a name="a3c4f277652stue"></a>
<p id="a3c4f277652stue">指定的最后机器指令是由绑定程序在模块内部分支后生成的。其它指定的机器指令识别成 no-op 指令，但转换成首选的 no-op 指令。</p></td>
</tr>
<tr>
<td>
<a id="a16393a6" name="a16393a6"></a><span class="bold">noquiet</span></td>
<td>  将每个绑定程序子命令和其结果写到标准输出。缺省值是 <span class="bold">quiet</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe44238joy" name="c1cbe44238joy"></a><span class="bold">noreorder</span></td>
<td>  不重新排序 CSECT，除了为将所有的 XMC_TC（TOC 地址常量）和 XMC_TD（TOC 变量）CSECT 组合在一起并且放置在数据部分，以及将所有 BSS 符号组合在一起并且放置在 bss 部分。所有其它 CSECT 放置在文本部分，因此文本和数据混合在输出文件里。当使用 <span class="bold">noreorder</span> 选项时，输出文件的文本部分不再是位置独立的并且如果文本部分不是位置独立的，系统装入程序不装入模块。因此，避免在程序和内核扩展上使用此选项。如果同时指定<span class="bold">noobjreorder</span> 和 <span class="bold">noreorder</span> 选项，<span class="bold">noreorder</span> 选项优先。缺省值是 <span class="bold">reorder</span> 选项。</td>
</tr>
<tr>
<td>
<a id="a3c4f277667stue" name="a3c4f277667stue"></a><span class="bold">nortl</span></td>
<td>  禁用输出文件的运行时链接。该选项意味着 <span class="bold">nortllib</span> 和 <span class="bold">nosymbolic-</span> 选项。甚至，不采用 <span class="bold">rtl</span> 选项描述的附加操作。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="a3c4f277678stue" name="a3c4f277678stue"></a><span class="bold">nortllib</span></td>
<td>  不包含运行时链接程序的引用。如果用此选项链接主程序，不管程序使用什么方式来链接任意共享模块，程序里都没有运行时链接。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="d7cb2ad447jani" name="d7cb2ad447jani"></a><span class="bold">nostrip</span></td>
<td>  不生成移除的输出文件。因此，在输出文件中写符号表和重定位信息。此选项覆盖 <span class="bold">-s</span> 标志。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="a3c4f277691stue" name="a3c4f277691stue"></a><span class="bold">nosymbolic</span></td>
<td>  将 <span class="bold">nosymbolic</span> 属性分配给大多数没有以显式属性导出的符号。关于更多信息，请参阅 <a href="ld.htm#a6f8hn67mart">已导出符号的属性</a>。缺省值是 <span class="bold">nosymbolic-</span> 选项。</td>
</tr>
<tr>
<td>
<a id="a3c4f277703stue" name="a3c4f277703stue"></a><span class="bold">nosymbolic-</span></td>
<td>  将 <span class="bold">nosymbolic-</span> 属性分配给大多数没有以显式属性导出的符号。关于更多信息，请参阅 『Attributes
of Exported Symbols。』 这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe44399joy" name="c1cbe44399joy"></a><span class="bold">notextro</span> 或 <span class="bold">nro</span></td>
<td>  不必检查，确保对于输出对象代码的文本部分没有装入时间重定位的条目。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe44488joy" name="c1cbe44488joy"></a><span class="bold">notypchk</span></td>
<td>  不检查外部函数调用之间的函数参数类型。缺省值是<span class="bold"> typchk</span> 选项。</td>
</tr>
<tr>
<td>
<a id="d7cb2ad644jani" name="d7cb2ad644jani"></a><span class="bold">nov</span></td>
<td>  不将附加信息写到装入映射文件。此选项是缺省值并且覆盖 <span class="bold">-v</span> 标志。</td>
</tr>
<tr>
<td>
<a id="c1cbe44566joy" name="c1cbe44566joy"></a><span class="bold">nox</span></td>
<td>  不使输出文件可执行。即不写辅助头，也不写装入程序部分。指定写进辅助头或装入程序部分的标志和选项在使用此选项时无效。缺省值是 <span class="bold">x</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe44642joy" name="c1cbe44642joy"></a><span class="bold">nro</span></td>
<td>  功能与 <span class="bold">notextro</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="d7cb2ad966jani" name="d7cb2ad966jani"></a><span class="bold">nso</span></td>
<td>  功能与 <span class="bold">noautoimp</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="d7cb2ae098jani" name="d7cb2ae098jani"></a><span class="bold">pD:</span><span class="italic">Origin</span></td>
<td>  指定 <span class="italic">Origin</span> 作为包含数据部分开始的文件页首字节地址。例如，如果数据部分在对象代码里的开始偏移量是<tt>0x22A0</tt>，并且 <tt>pD:0x20000000</tt> 是指定的，数据部分的首字节地址被分配为<tt>0x200002A0</tt>。假定页面大小是 4096（<tt>0x1000</tt>）字节。</td>
</tr>
<tr>
<td>
<a id="d7cb2ae138jani" name="d7cb2ae138jani"></a><span class="bold">pT:</span><span class="italic">Origin</span></td>
<td>  指定<span class="italic">Origin</span> 作为包含文本部分开始的文件页首字节地址。例如，如果文本部分在对象代码里的开始偏移量是 <tt>0x264</tt> ，并且 <tt>pT:0x10000000</tt> 是指定的，文本部分的首字节地址是<tt>0x10000264</tt>。</td>
</tr>
<tr>
<td>
<a id="c1cbe44727joy" name="c1cbe44727joy"></a><span class="bold">quiet</span></td>
<td>  不将绑定程序子命令和其结果写到标准输出中。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe44810joy" name="c1cbe44810joy"></a><span class="bold">R:</span><span class="italic">FileID</span></td>
<td>  功能与 <span class="bold">map:</span><span class="italic">FileID</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe44973joy" name="c1cbe44973joy"></a><span class="bold">r</span> 或<span class="bold"> reorder</span></td>
<td>  重新排序 CSECT 以作为<span class="bold"> save</span> 命令处理的一部分。重新排序通过引用的相近性排列存储映射类。这是缺省值。</td>
</tr>
<tr>
<td>
<a id="c1cbe44892joy" name="c1cbe44892joy"></a><span class="bold">rename:</span><span class="italic">Symbol，</span><span class="italic"> NewName</span></td>
<td>  将外部符号 <span class="italic">Symbol</span> 重命名为 <span class="italic">NewName</span>。实际上，这就好像是在处理文件前将所有对象代码里的 <span class="italic">Symbol</span> 定义和引用重命名为 <span class="italic">NewName</span>。缺省情况下，不重命名符号。</td>
</tr>
<tr>
<td>
<a id="d7cb2ae290jani" name="d7cb2ae290jani"></a><span class="bold">reorder</span></td>
<td>  功能与 <span class="bold">r</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe45051joy" name="c1cbe45051joy"></a><span class="bold">ro</span> 或 <span class="bold">textro</span></td>
<td>  确保对于生成的对象代码的文本部分，没有装入时间重定位的条目。缺省值是<span class="bold">nro</span> 选项。</td>
</tr>
<tr>
<td>
<a id="a3c4f277730stue" name="a3c4f277730stue"></a><span class="bold">rtl</span></td>
<td>  启用输出文件的运行时链接。此选项意味着 <span class="bold">rtllib</span> 和 <span class="bold">symbolic</span> 选项。
<a name="a3c4f277741stue"></a>
<p id="a3c4f277741stue">当起用动态方式时（请参阅<span class="bold">dynamic</span> 和 <span class="bold">static</span> 选项），<span class="bold">rtl</span> 选项允许用 <span class="bold">-l</span> 标志指定的输入文件以 <span class="bold">.so</span> 和 <span class="bold">.a</span> 结束。</p> 
<a name="a3c4f277752stue"></a>
<p id="a3c4f277752stue">全部是共享对象的输入文件作为程序的从属列在输出文件装入程序部分。共享对象按在命令行中指定的相同顺序列出。</p> 
<a name="a3c4f277763stue"></a>
<p id="a3c4f277763stue">如果压缩文档指定了共享对象成员的自动装入，仅列出包含在归档里的共享对象。通过下列行创建文件来指定归档成员<span class="bold">foo.o</span> 的自动装入：</p> 
<p></p>
<a name="a3c4f277774stue"></a>
<pre id="a3c4f277774stue" class="xmp"># autoload 
#! （foo.o） </pre> 
<p>将文件作为成员添加到归档。</p>通过使用 <span class="bold">-bautoload</span> 选项，可以指定归档成员 foo.o 的自动装入：
<pre class="xmp">-bautoload:&lt;archive_name>(foo.o)</pre>也可以用附加的<span class="bold">-bautoloads</span>指定附加的归档成员。</td>
</tr>
<tr>
<td>
<a id="a3c4f277797stue" name="a3c4f277797stue"></a><span class="bold">rtllib</span></td>
<td>  包含运行时链接程序的引用。运行时链接程序在 <span class="bold">librtl.a</span> 中定义，并且隐式<span class="bold">-lrtl</span> 标志自动地添加到命令行。当链接主程序或没有运行时链接时，此选项（由 <span class="bold"> rtl</span> 选项默示的）必须使用。共享对象不必用该选项链接。缺省值是 <span class="bold">nortllib</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe45128joy" name="c1cbe45128joy"></a><span class="bold">S:</span><span class="italic">Number</span></td>
<td>  功能与 <span class="bold">-S</span> 标志一样。</td>
</tr>
<tr>
<td>
<a id="d7cb2af453jani" name="d7cb2af453jani"></a><span class="bold">scalls:</span><span class="italic">FileID</span></td>
<td>  将对象代码的地址映射写到 <span class="italic">FileID</span>。按字母顺序列出符号。对于列在映射中的每个符号，列出了从这个符号到其它符号的引用。缺省情况下，不产生文件。学习有关<span class="bold">scalls</span> 选项的更多信息，请参阅 <a href="ld.htm#vcc7h308jbau">地址映射</a>。</td>
</tr>
<tr>
<td>
<a id="a3c4f277811stue" name="a3c4f277811stue"></a><span class="bold">shared</span></td>
<td>  功能与 <span class="bold">dynamic</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="d7cb2af528jani" name="d7cb2af528jani"></a><span class="bold">smap:</span><span class="italic">FileID</span></td>
<td>  将对象代码的地址映射写到 <span class="italic">FileID</span>。按字母顺序列出符号。缺省情况下，不产生文件。学习有关 <span class="bold">smap</span> 选项的更多信息，请参阅下面的『地址映射』。</td>
</tr>
<tr>
<td>
<a id="c1cbe45207joy" name="c1cbe45207joy"></a><span class="bold">so</span></td>
<td>  功能与 <span class="bold">autoimp</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="d7cb2af833jani" name="d7cb2af833jani"></a><span class="bold">stabcmpct:</span><span class="italic">Level</span></td>
<td>  指定调试部分中 stabstring 的压缩级别。Stabstring 是长度超过八个字符的字符串。符号表里的每个子串在调试部分中有自己的偏移量。对于 <span class="italic">Level</span>，下列值是有效的：
<dl>
<dt id="d7cb2af911jani" class="bold">
<a name="d7cb2af911jani"></a><span class="bold">0</span></dt>
<dd>不必压缩。重复 stabstring 的各个拷贝被写入到调试部分。
</dd>
</dl>
<dl>
<dt id="d7cb2af993jani" class="bold">
<a name="d7cb2af993jani"></a><span class="bold">1</span></dt>
<dd>删除副本。每个 stabstring 一次写到<tt>.debug</tt> 部分。符号表中的重复 stabstring 指定到调试部分的相同偏移量。
</dd>
</dl>
<dl>
<dt id="d7cb2b0062jani" class="bold">
<a name="d7cb2b0062jani"></a><span class="bold">2</span></dt>
<dd>重新编号 stabstring 并且删除大部分副本。（在一些实例中，存在多个 stabstring。它们描述相同类型但使用不同的类型数。）类型数的作用域是完整的输出文件，而不是用 C_FILE 符号表条目表示的单一的输入文件。
</dd>
</dl>
<dl>
<dt id="a3c4f277829stue" class="bold">
<a name="a3c4f277829stue"></a></dt>
<dd>如果绑定程序不能识别 stabstring，将返回错误消息并且生成的可执行文件没有有效的 stabstring。错误不影响剩余文件。
</dd>
</dl></td>
</tr>
<tr>
<td>
<a id="a5n8kn321mart" name="a5n8kn321mart"></a><span class="bold">static</span></td>
<td>  导致链接程序以静态方式处理后继共享对象。静态方式下，共享对象静态链接在输出文件里。甚至，当查找以 <span class="bold">-l</span> 标志指定的库时，找不到以<span class="bold">.so</span> 结束的文件。</td>
</tr>
<tr>
<td>
<a id="df5e0b9090mich" name="df5e0b9090mich"></a><span class="bold">sxref:</span><span class="italic">FileID</span></td>
<td>  将对象代码的地址映射写到 <span class="italic">FileID</span>。按字母顺序列出符号。对于列在映射中的每个符号，列出了从这个符号到其它符号的引用。缺省情况下，不产生文件。学习有关<span class="bold">sxref</span> 选项的更多信息，请参阅下面的 『Address
Maps』。紧接着。</td>
</tr>
<tr>
<td>
<a id="a3c4f277850stue" name="a3c4f277850stue"></a><span class="bold">symbolic</span></td>
<td>  将 <span class="bold">symbolic</span> 属性分配给没有以显式属性导出的大多数符号。关于更多信息，请参阅下面的『导出符号的属性』。缺省值是<span class="bold">nosymbolic-</span> 选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe45373joy" name="c1cbe45373joy"></a><span class="bold">textro</span></td>
<td>  功能与 <span class="bold">ro</span> 选项一样。</td>
</tr>
<tr>
<td>
<a id="c1cbe45470joy" name="c1cbe45470joy"></a><span class="bold">typchk</span></td>
<td>  执行外部函数调用之间的函数参数类型的检查。参数类型检查信息能通过编译器和汇编程序包含在对象代码里。这是缺省值。
<a name="a3c4f277863stue"></a>
<p id="a3c4f277863stue">关于类型检查的更多信息，请参阅 『XCOFF（a.out）文件格式 』 <span class="italic">AIX 5L Version 5.2 Files Reference</span>。</p></td>
</tr>
<tr>
<td>
<a id="c1cbe45548joy" name="c1cbe45548joy"></a><span class="bold">x</span></td>
<td>  如果无错误，使输出文件可执行。这是缺省选项。</td>
</tr>
<tr>
<td>
<a id="c1cbe45629joy" name="c1cbe45629joy"></a><span class="bold">X</span> 或 <span class="bold">xref:</span><span class="italic">FileID</span></td>
<td>  将对象代码的地址映射写到 <span class="italic">FileID</span>。先按段和后按地址排序符号。对于列在映射中的每个符号，列出了从这个符号到其它符号的引用。缺省情况下，不产生文件。学习有关 <span class="bold">xref</span> 选项的更多信息，请参阅下面的『地址映射』。</td>
</tr>
</tbody>
</table>
<a name="od8hn182mart"></a>
<h4 id="od8hn182mart">运行时链接</h4><a id="idx229" name="idx229"></a><a id="idx230" name="idx230"></a>
<a name="a3c4f277898stue"></a>
<p id="a3c4f277898stue">缺省情况下，链接时绑定共享对象里的符号引用。即，输出模块将导入模块与在特定共享对象里的定义关联在一起。在装入时，即使其它共享对象导出相同的符号，也使用在指定的共享对象里的定义。</p>
<a name="a3c4f277909stue"></a>
<p id="a3c4f277909stue">促使程序使用运行时链接程序，允许运行时重新绑定一些符号。创建使用运行时链接程序的程序，用 <span class="bold">-brtl</span> 选项链接程序。共享模块的链接方式影响符号的重新绑定。</p>
<a name="a3c4f277920stue"></a>
<p id="a3c4f277920stue">通过使用 <span class="bold">-G</span> 标志构建支持运行时链接的共享对象。只要没有被移除就可以通过用 <span class="bold">rtl_enable</span> 命令重链接共享对象来完全启用现有共享对象的运行时链接。</p>
<a name="a3119106d"></a>
<h4 id="a3119106d">导入和导出文件格式（-bI: 和 -bE: 标志）</h4><a id="idx231" name="idx231"></a><a id="idx232" name="idx232"></a>
<a name="a3c4f277933stue"></a>
<p id="a3c4f277933stue">导入或导出文件内的每一行必须在可选的关键字或可选的的地址前列出一个单一的符号。关键字是 <span class="bold">svc</span>、<span class="bold">svc32</span>、<span class="bold">svc3264</span>、<span class="bold">svc64</span>、<span class="bold">syscall</span>、<span class="bold">syscall32</span>、<span class="bold">syscall3264</span>、<span class="bold">syscall64</span>、<span class="bold">symbolic</span>、<span class="bold">nosymbolic</span>、<span class="bold">nosymbolic-</span>、<span class="bold">list</span>、<span class="bold">cm</span>、<span class="bold">bss</span>和 <span class="bold">weak</span>。仅使用 <span class="bold">weak</span> 关键字与其它关键字连接。</p>
<a name="a3c4f277946stue"></a>
<p id="a3c4f277946stue">在导入文件里，可以指定符号后的地址将 CSECT 数据映射到共享内存段并且取消使用汇编程序的必要性。也可以使用 <span class="bold">cm</span>、<span class="bold">bss</span> 或 <span class="bold">weak</span> 中的一个关键字指定导入符号的存储类。当使用 <span class="bold">autoexp</span> 选项时，导入符号的存储类影响自动导出的符号。如果在导入文件中指定了任意其它关键字，将忽略此关键字。</p>
<a name="a3c4f277959stue"></a>
<p id="a3c4f277959stue">在导出的文件中，在名称后可以使用<span class="bold"> svc</span> 或 <span class="bold">syscall</span> 关键字表示这是一个系统调用。当链接内核扩展时这是必须的。可以使用 <span class="bold">symbolic</span>、<span class="bold">nosymbolic</span>,
或 <span class="bold">nosymbolic-</span> 关键字将属性和导出的符号关联在一起。关于更多信息，请参阅 <a href="ld.htm#a6f8hn67mart">已导出符号的属性</a>。尽管不会作为导出文件被标记，但可以使用 <span class="bold">list</span> 关键字使符号列在输出文件的装入程序部分。这可以用于要在运行时处理一些符号的应用程序。系统装入程序或运行时链接程序不处理列出的符号。在导出文件里忽略符号地址和关键字<span class="bold">cm</span> 和 <span class="bold">bss</span>。可以使用 <span class="bold">weak</span> 关键字指定 weak 符号绑定，也可以和其它属性一起使用。</p>
<a name="e5b7163165mart"></a>
<p id="e5b7163165mart"><span class="bold">ld</span> 命令按下列准则处理导入和导出文件。</p>
<ul>
<li>忽略空白行。</li>
<li>以 *（星号）开始的行是注释，可以忽略。</li>
<li>
<p>以 <span># </span> （#，空白）开始的行提供操作数给 <span class="bold">setopt</span> 绑定程序子命令（<span class="bold">-bdbg:</span><span class="italic">Option</span>）。例如，当从文件读取包含<tt># verbose</tt> 的行时，会导致绑定程序列出每个符号。当处理文件时，选项设置是活动的。可以用 # 32、# 64、# no32 和 # no64 选项指定列出的来指定是否应该为 32 位链接、64 位链接或同时两者使用所列出的符号。</p>
<p><span class="bold">32 位和 64 位导入文件选项</span></p>
<p></p>
<a name="wq487"></a>
<table id="wq487" width="90%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="14%"><span class="bold">32</span></td>
<td width="85%">当在 32-bit 方式下链接时，在导入或导出文件里使用此选项指定应该处理的后继符号，但在
64-bit 方式下链接时，忽略此选项。如果没有指定 <span class="bold">32</span> 或 <span class="bold">64</span> 选项，在 32- 和 64-bit 方式下都处理所有的符号。</td>
</tr>
<tr>
<td><span class="bold">64</span></td>
<td>当在 64 位方式下链接时，在导入或导出文件里使用此选项指定应该处理的后继符号，但在
32 位方式下链接时，忽略此选项。如果没有指定 <span class="bold">32</span> 或 <span class="bold">64</span> 选项，在 32- 和 64-bit 方式下都处理所有的符号。</td>
</tr>
<tr>
<td><span class="bold">no32</span> 或 <span class="bold">no64</span></td>
<td>重设先前的 <span class="bold">32</span> 或 <span class="bold">64</span>。在 32 位和 64 位方式下处理后继符号。</td>
</tr>
</tbody>
</table></li>
<li>当处理导入文件时，以#!（#，感叹号） 开始的行提供与后继导入符号有关的共享库名称。此行可以不止一次的出现并且适用于后继符号直到读到以 <tt> #!</tt>开始的下一行。此文件名信息放在 XCOFF 对象代码的装入程序部分。系统装入程序用于在执行期间定位适当的对象代码。如果导入文件名是 <span class="bold">ipath／ifile</span>（imember），则基于导入文件名和导入文件 <tt class="xph">#!</tt> 行的内容确定放在装入程序部分的导入文件名。如下：
<p></p>
<a name="wq488"></a>
<table id="wq488" width="90%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="18%">
<a id="a31191073" name="a31191073"></a><span class="bold">#!</span></td>
<td width="81%">  （在<tt class="xph"> #!</tt>后空白）使用空路径、空文件、空数字。通过系统装入程序作为延期导入处理。</td>
</tr>
<tr>
<td>
<a id="c1cbe46399joy" name="c1cbe46399joy"></a><span class="bold">#! ()</span></td>
<td>  使用 <tt>ipath</tt>、<tt>ifile</tt>和 <tt>imember</tt>。如果导入文件作为命令行中 <span class="italic">InputFile</span> 参数指定，可以使用此行。在这种情况下，文件必须以<tt class="xph">#!</tt>开头。如果被其它 <tt class="xph">#!</tt>行改变，可以使用此行恢复缺省。</td>
</tr>
<tr>
<td>
<a id="c1cbe46479joy" name="c1cbe46479joy"></a><span class="bold">#!</span><span class="italic"> path</span><span class="bold">/</span><span class="italic">file</span><span class="bold"> (</span><span class="italic">member</span><span class="bold">)</span></td>
<td>  使用指定路径、文件和成员。</td>
</tr>
<tr>
<td>
<a id="c1cbe46563joy" name="c1cbe46563joy"></a><span class="bold">#!</span><span class="italic"> path</span><span class="bold">／</span><span class="italic">file</span><span class="bold"></span></td>
<td>  使用指定路径和文件以及空成员。</td>
</tr>
<tr>
<td>
<a id="c1cbe46649joy" name="c1cbe46649joy"></a><span class="bold">#!</span><span class="italic"> file</span></td>
<td>  使用空路径、指定的文件和空成员。运行时，搜索目录列表查找共享对象。</td>
</tr>
<tr>
<td>
<a id="c1cbe46735joy" name="c1cbe46735joy"></a><span class="bold">#!</span><span class="bold">（</span><span class="italic">member</span><span class="bold">）</span></td>
<td>  使用 <tt>ipath</tt>、<tt>ifile</tt>和指定的成员。运行时，搜索目录列表查找共享对象。</td>
</tr>
<tr>
<td>
<a id="c1cbe46825joy" name="c1cbe46825joy"></a><span class="bold">#!</span><span class="italic"> file</span><span class="bold">（</span><span class="italic">member</span><span class="bold">）</span></td>
<td>  使用空路径以及指定的文件和成员。运行时，搜索目录列表查找共享对象。</td>
</tr>
<tr>
<td>
<a id="a3c4f277998stue" name="a3c4f277998stue"></a><span class="bold">#! .</span></td>
<td>  （单个点）此名称参照主可执行文件。当创建从不同名称的多个主程序导入符号的共享对象时使用此文件。主程序必须导出有其它模块导入的符号，否则装入失败。与或不与运行时链接程序一起都可以使用此导入文件名称。</td>
</tr>
<tr>
<td>
<a id="a3c4f278009stue" name="a3c4f278009stue"></a><span class="bold">#! ..</span></td>
<td>  （两个点）通过运行时链接程序使用此名称列出要解析的符号。使用此文件名创建通过程序利用运行时链接程序使用的共享对象。如果使用从 <span class="bold">..</span>中，在程序里不与 <span class="bold">rtllib</span> 选项链接，导入符号的模块，符号将是不确定的并且这些符号的引用产生未定义的行为。</td>
</tr>
</tbody>
</table></li></ul>
<a name="a3c4f278020stue"></a>
<p id="a3c4f278020stue">当使用<span class="bold">-brtl</span> 选项时，自动装入归档成员，如下创建导入文件。如果 <span class="bold">shr.so</span> 是归档里的共享对象，创建一个导入文件：</p>
<p></p>
<a name="a3c4f278031stue"></a>
<pre id="a3c4f278031stue" class="xmp"># autoload
#! （shr.so）</pre>
<a name="a3c4f278043stue"></a>
<p id="a3c4f278043stue">如果适当的话，可以在附加行列出附加成员名称。不必列出导入文件里的符号名称，因为从 <span class="bold">shr.so</span> 导入的符号将从 <span class="bold">shr.so</span> 自己中读取。</p>
<p>关于创建共享库的更多信息，请参阅在 <span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span> 中的『如何创建共享库』。关于装入和绑定的更多信息，请参阅 <span class="bold">load</span> 子例程 <span class="italic">AIX 5L Version 5.2 Technical Reference: Base Operating System and Extensions Volume 1</span>。</p>
<a name="a6f8hn67mart"></a>
<h4 id="a6f8hn67mart">已导出符号的属性</h4><a id="idx233" name="idx233"></a><a id="idx234" name="idx234"></a>
<a name="a3c4f278069stue"></a>
<p id="a3c4f278069stue">当使用运行时链接时，如果导出符号带有正确属性，那么仅能重新绑定同一模块的符号引用。不能重新绑定带有 <span class="bold">symbolic</span> 属性的符号引用。不能重新绑定带有<span class="bold">nosymbolic</span> 属性的符号引用。如果符号是变量，不能重新绑定带有<span class="bold">nosymbolic-</span> 属性的符号引用。对于函数符号，可以重新绑定使用函数指针的调用，而不能重新绑定直接的函数。<span class="bold">nosymbolic-</span> 属性是缺省值并且为和操作系统的先前版本兼容而提供，但不推荐这种用法。</p>
<a name="a3c4f278080stue"></a>
<p id="a3c4f278080stue">如果没有使用运行时链接程序，<span class="italic">避免</span> 使用<span class="bold">nosymbolic</span> 属性，因为将通过使用全局链接代码的函数描述符直接进行模块内函数调用。否则，对于与不使用运行时链接程序的程序一起使用的模块导出的符号属性无效。</p>
<a name="a3c4f278092stue"></a>
<p id="a3c4f278092stue">可以指定导出文件里列出的符号的显式导出属性。大多数没有显式属性的符号以缺省的导出属性导出，缺省的导出属性由 <span class="bold">symbolic</span>、<span class="bold">nosymbolic</span>或 <span class="bold">nosymbolic-</span> 选项指定。</p>
<p><span class="bold">weak</span> 导出属性将装入程序部分里的关联符号映射类型标记为 L_WEAK。</p>
<a name="a3c4f278103stue"></a>
<p id="a3c4f278103stue">导入符号仅有 <span class="bold">weak</span> 导出属性。如果从其它模块中导入符号，符号的所有引用将被重新绑定。然而，在固定地址导入符号，所有符号绑定到固定地址，并且不能被运行时链接程序重新绑定。系统装入程序必须解析延迟的导入。运行时链接程序从来不解析或重新绑定到延迟导入的引用。</p>
<a name="a3c4f278114stue"></a>
<p id="a3c4f278114stue">对于导出非导入的符号，使用下列规则。</p>
<ul>
<li>如果符号有 <span class="bold">list</span> 属性，将在装入程序部分符号表中列出，但不在符号表条目里设置 <span class="bold">L_EXPORT</span> 标志。运行时链接程序忽略这样的符号。</li>
<li>如果符号以显式属性导出，使用显式属性。</li>
<li>如果符号是 BSS 符号，以<span class="bold">nosymbolic</span> 属性导出。</li>
<li>否则，符号以全局属性导出，全局属性由 <span class="bold">symbolic</span>、<span class="bold">nosymbolic</span> 或 <span class="bold">nosymbolic-</span> 选项指定。缺省全局属性是 <span class="bold">nosymbolic-</span>。</li></ul>
<a name="vcc7h308jbau"></a>
<h3 id="vcc7h308jbau">地址映射</h3><a id="idx235" name="idx235"></a><a id="idx236" name="idx236"></a>
<a name="e5b7165528mart"></a>
<p id="e5b7165528mart"><span class="bold">ld</span> 命令生成地址映射，列出输出对象代码里的符号布局。如果使用 <span class="bold">map</span>（或 <span class="bold">R</span>）选项，在地址序列里每个部分的字符前首先列出未解析的符号和导入符号。如果使用 <span class="bold">calls</span>（或 <span class="bold">C</span>）选项，列出的每个符号在从此符号到其它符号的引用之前。如果使用<span class="bold">xref</span>（或 <span class="bold">X</span>）选项，列出的每个符号在从其它符号到此符号的引用列表之前。如果使用 <span class="bold">smap</span>、<span class="bold">scalls</span> 或 <span class="bold">sxref</span> 选项，地址映射包含分别与 <span class="bold">map</span>、<span class="bold">calls</span> 或 <span class="bold">xref</span> 选项列出的相互对应的相同信息，但以字母顺序列出符号。</p>
<a name="e5b7165678mart"></a>
<p id="e5b7165678mart">带有存储类 C_HIDEXT 的内部符号与包围符号名的字符 <tt>&lt;</tt> 和 <tt>></tt>（尖括号）一起打印。带有存储类 C_EXT 的外部符号名不与尖括号一起打印，带有存储类 C_WEAKEXT 的外部符号与包围符号名的字符 <tt class="xph">{</tt> 和 <tt class="xph">}</tt> 一起打印。</p>
<a name="e5b7165824mart"></a>
<p id="e5b7165824mart">列出的关于每个符号的信息包括：</p>
<ul>
<li>符号是否是导入的、导出的或入口点的指示。使用 *（星号）标志入口点，使用<span class="bold"> I</span> 标记导入的符号，使用 <span class="bold">E</span> 标记导出的符号。</li>
<li>地址（除导入符号以外）</li>
<li>长度和对齐（对于 CSECT 和 BSS 符号）</li>
<li>存储映射类</li>
<li>符号类型</li>
<li>符号数（用作区分同名的符号）</li>
<li>符号名称</li>
<li>输入文件信息</li></ul>
<a name="d7cb2b2575jani"></a>
<p id="d7cb2b2575jani">存储映射类和符号类型定义在 <span class="bold">/usr/include/syms.h</span> 文件里。在地址映射里，仅显示最后两个字符，除了存储类 <span class="bold">XMC_TC0</span> 如 <span class="bold">T0</span> 显示的那样。</p>
<a name="e5b7166747mart"></a>
<p id="e5b7166747mart">输入文件信息取决于输入文件类型。对于对象代码，列出从 C_FILE 符号表条目中获得的源文件名。如果对象来自归档文件，对象代码按以下格式列出：</p>
<p></p>
<a name="d7cb2b2650jani"></a>
<pre id="d7cb2b2650jani" class="xmp"><span class="italic">ArchiveFileName[ObjectName]</span></pre>
<a name="e5b7166962mart"></a>
<p id="e5b7166962mart">共享对象名列在 { } (括弧) 之间。如果共享对象通过导入文件定义，那么导入文件名列在共享对象名之前。</p>
<a name="e5b7167110mart"></a>
<p id="e5b7167110mart">导入符号有 ER 符号类型，但有关联的文件输入信息。未定义的符号与 ER 的符号类型列在一起，但除了符号数的所有其它列都为空。</p>
<a name="e5b7167496mart"></a>
<p id="e5b7167496mart"><span class="bold">-T</span> 和 <span class="bold">-D</span> 标记（或<span class="bold"> pT</span> 或 <span class="bold">pD</span> 选项）影响地址映射里打印的地址。对于机器级调试，选择地址是有用的，这样符号就可以与它们在运行时具有的相同地址一同列出。对于不使用专有装入共享对象的 32 位程序，可以通过指定 <tt>-bpT:0x10000000</tt> 和 <tt>-bpD:0x20000000</tt> 选项选择正确地址。这些选项缺省情况下定义在<span class="bold">/etc/xlC.cfg</span> 或 <span class="bold">/etc/vac.cfg</span> 文件里。</p>
<a name="df5e0bc974mich"></a>
<h3 id="df5e0bc974mich">环境变量</h3><a id="idx237" name="idx237"></a><a id="idx238" name="idx238"></a>
<a name="e5b7167777mart"></a>
<p id="e5b7167777mart">以下环境变量影响 <span class="bold">ld</span> 命令执行：</p>
<a name="wq489"></a>
<table id="wq489" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="17%">
<a id="df5e0bd128mich" name="df5e0bd128mich"></a><span class="bold">LIBPATH</span></td>
<td width="82%">  如果定义了 <span class="bold">LIBPATH</span>，使用它的值作为缺省库路径信息。否则缺省库路径信息是 <span class="bold">/usr/lib:/lib</span>。如果没有指定<span class="bold">-L</span> 标志和 <span class="bold">-blibpath</span> 选项，缺省库路径信息写到输出文件的装入程序部分。不管指定的任意选项，当搜索命令行中指定的库时不使用<span class="bold">LIBPATH</span>。</td>
</tr>
<tr>
<td>
<a id="df5e0bd206mich" name="df5e0bd206mich"></a><span class="bold">TMPDIR</span></td>
<td>  如果输出文件已经存在或在远程文件系统中，<span class="bold">ld</span> 命令生成临时的输出文件。临时输出文件创建在通过 <span class="bold">TMPDIR</span> 指定的目录下。如果没有定义 <span class="bold">TMPDIR</span>，当输出文件是远程的或在与现有的输出文件同样的目录下时，临时输出文件创建在 <span class="bold">/tmp</span>下。</td>
</tr>
<tr>
<td>
<a id="i0820970733mikm" name="i0820970733mikm"></a><span class="bold">OBJECT_MODE</span></td>
<td>如果既不使用 <span class="bold">-b32</span> 也不使用 <span class="bold">-b64</span> 选项，检测 <span class="bold">OBJECT_MODE</span> 环境变量确定链接方式。如果<span class="bold"> OBJECT_MODE</span>值是 <span class="bold">32</span> 或 <span class="bold">64</span>，分别使用 32 位或 64 位方式。如果是<span class="bold"> 32_64</span> 或任意其它值，链接程序打印错误消息并且返回非零值退出。否则，使用 32 位方式。</td>
</tr>
</tbody>
</table>
<a name="a09493d1"></a>
<h3 id="a09493d1">示例</h3><a id="idx239" name="idx239"></a>
<ol type="1">
<li>要链接多个对象文件并生成要在操作系统下运行的 <span class="bold">a.out</span> 文件，请输入：
<p></p>
<a name="a09493d3"></a>
<pre id="a09493d3" class="xmp">ld /usr/lib/crt0.o pgm.o subs1.o subs2.o -lc</pre><p class="indatacontent"> <tt>-lc</tt>（小写字母 L）链接<span class="bold">libc.a</span> 库。完成这的简单方式是使用 <tt>cc</tt> 命令（编译器）按如下所示链接文件：</p>
<a name="a09493d5"></a>
<pre id="a09493d5" class="xmp">cc  pgm.o  subs1.o  subs2.o</pre></li>
<li>要指定输出文件名称，请输入：
<p></p>
<a name="a09493d8"></a>
<pre id="a09493d8" class="xmp">cc  -o pgm  pgm.o  subs1.o  subs2.o</pre><p class="indatacontent"> 在文件 <tt>pgm</tt> 里创建输出。</p></li>
<li>只要更改了对象文件 <span class="bold">subs1.o</span>，要重新链接 <tt>pgm</tt>，请输入：
<p></p>
<a name="c1cbe48097joy"></a>
<pre id="c1cbe48097joy" class="xmp">cc -o pgm subs1.o pgm</pre><p class="indatacontent"> 起初来自对象代码 <span class="bold">pgm.o</span> 和 <span class="bold">subs2.o</span>的 CSECT 从文件 <span class="bold">pgm</span>中读出。如果程序由多个输入文件构成但仅有少数文件同时更改时此技术可以加速处理。</p></li>
<li>要用库子例程链接，请输入：
<p></p>
<a name="a09493db"></a>
<pre id="a09493db" class="xmp">cc  pgm.o  subs1.o  subs2.o  mylib.a  -ltools</pre><p class="indatacontent"> 这会链接对象模块 <tt>pgm.o</tt>、<tt>subs1.o</tt> 和 <tt>subs2.o</tt>，来自 <tt>mylib.a</tt> 归档的子例程和来自由 <span class="bold">-l</span>（小写字母 L）标志指定的库中的子例程。（这指 <span class="bold">/usr/lib/libtools.a</span> 文件）。</p></li>
<li>要生成共享对象，请输入：
<p></p>
<a name="a1789415"></a>
<pre id="a1789415" class="xmp">ld -o shrsub.o subs1.o subs2.o -bE:shrsub.exp -bM:SRE -lc</pre><p class="indatacontent"> 这链接对象代码 <span class="bold"> subs1.o</span>、<span class="bold">subs2.o</span>和来自库 <span class="bold">libc.a</span> 中用 <span class="bold">-lc</span> 标志指定的子例程。导出指定在文件 <span class="bold">shrsub.exp</span>里的符号并且存储链接的共享对象在文件 <span class="bold">shrsub.o </span>里。<tt>-bM:SRE</tt> 在链接共享对象里设置共享对象标记。</p></li>
<li>要使用先前生成的共享对象 <tt>shrsub.o</tt> 链接，请输入：
<p></p>
<a name="a1789418"></a>
<pre id="a1789418" class="xmp">cc -o pgm pgm.o shrsub.o -L '.'</pre><p class="indatacontent"> 这用 <tt>shrsub.o</tt>导出的符号链接对象代码<span class="bold">pgm.o</span>。链接的输出存储在对象代码 <tt>pgm</tt> 中。 <tt>-L '.'</tt> 添加当前目录到系统装入程序用于定位 <tt>shrsub.o</tt> 共享对象的库搜索路径。运行时，仅在从包含 <tt>shrsub.o</tt> 文件实例的目录运行或发现 <tt>shrsub.o</tt> 文件在 <span class="bold">/usr/lib</span> 标准库目录中时，装入该程序。允许从任何地方运行程序，使用选项 <span class="bold">-L</span><tt> `</tt><span class="bold">pwd</span><tt>`</tt>。</p> 
<a name="e5b716a036mart"></a>
<p id="e5b716a036mart">可以使用 <span class="bold">dump</span> 命令参阅由系统装入程序搜索的目录列表。</p></li>
<li>要使用 <span class="bold">libc.a</span> 库作为非共享库链接程序，请输入：
<p></p>
<a name="a137c16d"></a>
<pre id="a137c16d" class="xmp">cc -o pgm&nbsp;pgm.o -bnso -bI:/lib/syscalls.exp</pre><p class="indatacontent"> 以必需的支持库来链接 <tt>pgm.o</tt> 并且命名输出文件 <tt>pgm</tt>。对于 <tt>cc</tt> 命令，<span class="bold">libc.a</span> 库是必须的支持库和通常是作为共享库编辑到用户程序的链接。此例中，<tt>-bnso</tt> 选项指示 <span class="bold">ld</span> 命令用<span class="bold">libc.a</span> 库作为非共享库链接，<tt>-bI:/lib/syscalls.exp</tt> 指示 <span class="bold">ld</span> 命令导入实际上包含在内核或 <span class="bold">/usr/lib/boot/unix</span> 文件中的系统调用函数。无论何时用 <tt>-bnso</tt> 选项链接，在共享对象中导入且导出（既，通过）的任意符号必须先显式导入，正如此例中由 <tt>-bI:/lib/syscalls.exp</tt> 选项所操作的。</p>
<a name="a137c16f"></a>
<div class="notetitle" id="a137c16f">注:</div>
<div class="notebody">当任意时间非共享链接 <span class="bold">/usr/lib/libc.a</span> 时，必须使用 <span class="bold">-bI:/lib/syscalls.exp</span> 标志。无论何时安装操作系统的更新发行版，应用程序也不得不再次链接。任意静态链接的应用程序<span class="italic">不</span>是可以从任意修正或发行版级别移植到其它修正或发行版级别上的二进制文件。</div></li></ol>
<a name="a09493de"></a>
<h3 id="a09493de">文件</h3><a id="idx240" name="idx240"></a>
<p></p>
<a name="wq491"></a>
<table id="wq491" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="22%"><span class="bold">/usr/bin/ld</span></td>
<td width="77%">包含 <span class="bold">ld</span> 命令。</td>
</tr>
<tr>
<td>
<a id="c1cbe49577joy" name="c1cbe49577joy"></a>/<span class="bold">usr</span>/<span class="bold">lib</span>/<span class="bold">lib*.a</span></td>
<td>  指定链接程序使用的库。</td>
</tr>
<tr>
<td>
<a id="c1cbe49657joy" name="c1cbe49657joy"></a><span class="bold">a.out</span></td>
<td>  指定缺省输出文件名。</td>
</tr>
</tbody>
</table>
<a name="a09493e4"></a>
<h3 id="a09493e4">相关信息</h3>
<a name="e5b716b534mart"></a>
<p id="e5b716b534mart"><a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/cmds/aixcmds1/ar.htm#a0949a5b"><span class="bold">ar</span></a> 命令、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/cmds/aixcmds1/as.htm#d2e0shad"><span class="bold">as</span></a> 命令、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/cmds/aixcmds4/nm.htm#a09495a5"><span class="bold">nm</span></a> 命令、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/cmds/aixcmds2/dump.htm#a32099c2"><span class="bold">dump</span></a> 命令、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/cmds/aixcmds4/rtl_enable.htm#ultgn378mart"><span class="bold">rtl_enable</span></a> 命令、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/cmds/aixcmds5/strip.htm#a254b9ac39"><span class="bold">strip</span></a> 命令。</p>
<a name="e5b716b677mart"></a>
<p id="e5b716b677mart"><a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/files/aixfiles/XCOFF.htm"><span class="bold">a.out</span></a> 文件格式。</p>
<a name="e5b716b824mart"></a>
<p id="e5b716b824mart"><a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/libs/basetrf1/glob.htm#a143c1420"><span class="bold">glob</span></a> 子例程、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/libs/basetrf1/load.htm#a1289a2c"><span class="bold">load</span></a> 子例程、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/libs/basetrf1/loadbind.htm#a262b9118"><span class="bold">loadbind</span></a> 子例程、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/libs/basetrf1/loadquery.htm#a12f03c"><span class="bold">loadquery</span></a> 子例程、<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/libs/basetrf2/unload.htm#a2019d34"><span class="bold">unload</span></a> 子例程。</p>
<a name="e5b716b976mart"></a>
<p id="e5b716b976mart">『<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/aixprggd/genprogc/create_shared_lib.htm#a144c1671">如何创建共享库</a>』<span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span>。</p>
<p>『<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/aixprggd/genprogc/lrg_prg_support.htm#a179c11c5d">大程序支持概述</a>』<span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span>。</p>
<p>『<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/aixprggd/genprogc/lazyload.htm#fwxqo88soni">共享库和迟缓装入</a>』 <span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span>。</p>
<a name="e5b716c129mart"></a>
<p id="e5b716c129mart">『<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/aixprggd/genprogc/shared_libs_mem.htm#a144c1694">共享库概述</a>』<span class="italic">AIX 5L Version 5.2 General Programming Concepts: Writing and Debugging Programs</span>。</p>
<p>『<a href="http://study.chyangwa.com/IT/AIX/aixcmds3/zh_CN/files/aixfiles/XCOFF.htm">XCOFF（a.out）文件格式 </a>』<span class="italic">AIX 5L Version 5.2 Files Reference</span>。</p>
<FONT COLOR="#A62A2A"></FONT><p></p>
   <center>
<B>[ <a href="ld.htm#Top_Of_Page">页的顶部</a> | <a href="lbxproxy.htm">上一页</a> | <a href="ldd.htm">下一页</a> | <a href="mastertoc.htm#mtoc">目录</a> | <a href="aixcmds302.htm#wq2149">索引</a> | <A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>资料库</B></A> |
<A HREF="notices.htm"><B>法律条款</B></A> |
<A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>搜索</B></A> ]</B>
</center>

<a id="Bot_Of_Page" name="Bot_Of_Page"></a>
</body>
</html>
