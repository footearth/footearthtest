<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-CN" xml:lang="zh-CN">
<head>
<title>命令参考大全，卷 5，s - u - tprof 命令</title>
<meta http-equiv="Content-Type" content="text/html; charset=gb2312" />
<meta name="dc.date" scheme="iso8601" content="2004-04-30" />
<meta name="copyright" content="(C) IBM公司版权 1997, 2004" />
<meta name="security" content="public" />
<meta name="dc.language" scheme="rfc1766" content="zh-cn" />
<meta name="Robots" content="index,follow"/>
<meta http-equiv="PICS-Label" content='(PICS-1.1 "http://www.icra.org/ratingsv02.html" l gen true r (cz 1 lz 1 nz 1 oz 1 vz 1) "http://www.rsac.org/ratingsv01.html" l gen true r (n 0 s 0 v 0 l 0) "http://www.classify.org/safesurf/" l gen true r (SS~~000 1))' />
<meta name="owner" content="" />
<meta name="keywords" content="tprof 命令, 报告用法, CPU" />
<link rel="stylesheet" type="text/css" href="ibmidwb.css" />
<link rel="stylesheet" type="text/css" href="text.css" />
</head>
<body>
<a id="Top_Of_Page" name="Top_Of_Page"></a> <P><center>
<B>[ <a href="tprof.htm#Bot_Of_Page">页的底部</a> | <a href="touch.htm">上一页</a> | <a href="tput.htm">下一页</a> | <a href="mastertoc.htm#mtoc">目录</a> | <a href="aixcmds502.htm#wq1667">索引</a> |  <A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>资料库</B></A> |
<A HREF="notices.htm"><B>法律条款</B></A> |
<A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>搜索</B></A> ]</B>
</center>
<center><h1>命令参考大全，卷 5，s - u</h1></center>

<a name="c013828476joy"></a>
<h2 id="c013828476joy">tprof 命令</h2><a id="idx486" name="idx486"></a><a id="idx487" name="idx487"></a>
<a name="e0f0ae9607meki"></a>
<h3 id="e0f0ae9607meki">用途</h3>
<a name="f915ce8978mart"></a>
<p id="f915ce8978mart">报告 CPU 使用情况。</p>
<a name="wq1041"></a>
<h3 id="wq1041">语法</h3>
<p><span class="bold">tprof</span> [ <a href="tprof.htm#newtprof-c"><span class="bold">-c</span></a> ]  [ <a href="tprof.htm#newtprof-upc"><span class="bold">-C</span></a> { <span class="bold">all</span> | <span class="italic">CPUList</span> } ] [ <a href="tprof.htm#newtprof-d"><span class="bold">-d</span></a> ] <a href="tprof.htm#newtprof-upd"><span class="bold">-D</span></a> ]
[ <a href="tprof.htm#newtprof-e"><span class="bold">-e</span></a> ] [ <a href="tprof.htm#newtprof-upf"><span class="bold">-F</span></a> ] [ <a href="tprof.htm#newtprof-j"><span class="bold">-j</span></a> ]
[ <a href="tprof.htm#newtprof-k"><span class="bold">-k </span></a>] [ <a href="tprof.htm#newtprof-l"><span class="bold">-l</span></a> ] [ <a href="tprof.htm#newtprof-m"><span class="bold">-m</span></a> <span class="italic">ObjectsList</span> ] [ <a href="tprof.htm#newtprof-upm"><span class="bold">-M</span></a> <span class="italic">SourcePathList</span> ] [ <a href="tprof.htm#newtprof-p"><span class="bold">-p</span></a> <span class="italic">ProcessList</span> ] [ <a href="tprof.htm#newtprof-upp"><span class="bold">-P</span></a> { <span class="bold">all</span> | <span class="italic">PIDsList</span> } ] [ <a href="tprof.htm#newtprof-s"><span class="bold">-s</span></a> ]
[ <a href="tprof.htm#newtprof-ups"><span class="bold">-S</span></a> <span class="italic">SearchPathList</span> ] [ <a href="tprof.htm#newtprof-t"><span class="bold">-t</span></a> ]
[ <a href="tprof.htm#newtprof-upt"><span class="bold">-T</span></a> <span class="italic">BufferSize</span> ] [ <a href="tprof.htm#newtprof-u"><span class="bold">-u</span></a> ]
[ <a href="tprof.htm#newtprof-v"><span class="bold">-v</span></a> ] [ <a href="tprof.htm#newtprof-upv"><span class="bold">-V</span></a> <span class="italic">VerboseFileName </span>] [ <a href="tprof.htm#newtprof-z"><span class="bold">-z</span></a> ] { { <a href="tprof.htm#newtprof-r"><span class="bold">-r</span></a> <span class="italic">RootString</span> } | { [ <a href="tprof.htm#newtprof-upa"><span class="bold">-A</span></a> { <span class="bold">all</span> | <span class="italic">CPUList</span> }] [ <a href="tprof.htm#newtprof-r"><span class="bold">-r</span></a> <span class="italic">RootString</span> ] <a href="tprof.htm#newtprof-x"><span class="bold">-x</span></a> <span class="italic">Program</span> } }</p>
<a name="wq1042"></a>
<div class="notelisttitle" id="wq1042">注:</div>
<ol type="1">
<li>除路径列表外，所有的列表类型输入用逗号分隔，路径列表用冒号分隔。</li>
<li>当此命令以实时方式运行时，每个 CPU 的概要分析方式自动禁用。</li>
<li>如果每个 CPU 概要分析被打开，则其微概要分析自动禁用。</li>
<li>如果指定 <span class="bold">-x</span> 标志不带 <span class="bold">-A</span> 标志，则 <span class="bold">tprof</span> 以实时方式运行。</li>
<li>如果指定 <span class="bold">-x</span> 标志带 <span class="bold">-A</span> 标志，则 <span class="bold">tprof</span> 以自动离线方式运行。</li>
<li>如果 <span class="bold">-x</span> 标志省略，则 <span class="bold">tprof</span> 以后处理方式或人工离线方式运行，这取决于有无 cooked 文件和 <span class="bold">-F</span> 标志。</li>
</ol>
<a name="wq1044"></a>
<h3 id="wq1044">描述</h3>
<p><span class="bold">tprof</span> 命令报告单个程序和整个系统的 CPU 使用情况。对任何使用可能是 CPU 受限的 JAVA、C、C++ 或 FORTRAN 程序的人，和想了解程序的哪些部分大量占用 CPU 的人，该命令是一个有用的工具。</p>
<p><span class="bold">tprof</span> 命令负责分配对象代码、进程、线程、子例程（用户方式、内核方式以及共享库），甚至是程序的源代码行或单个指令使用 CPU 的时间。给子例程分配使用 CPU 时间被称为概要分析，而给源程序代码行分配使用 CPU 时间被称为微概要分析。</p>
<p>对于子例程级概要分析，不用修改可执行程序即可运行 <span class="bold">tprof</span> 命令，就是说不必使用专用编译器标志进行重新编译。除非已除去回退表，否则即使可执行程序已卸载也还是如此运行。但是，必需进行重新编译才能获取微概要分析文件，除非列表文件已经可用。要在一个程序上执行微概要分析，要么用 <span class="bold">-g</span> 来编译该程序且源文件应可访问 <span class="bold">tprof</span>，要么用 <span class="bold">-q</span><span class="italic">list</span> 来编译该程序，且对象列表文件和源文件或者只有对象列表文件对于 <span class="bold">tprof</span> 应该是可访问的。要充分利用 <span class="bold">tprof</span>  微概要分析能力，最好既提供 <tt class="xph">.lst</tt> 列表文件又提供源文件。</p>
<p><span class="bold">tprof</span> 可用以下四种方式运行：</p>
<ol type="1">
<li>实时或在线方式</li>
<li>人工离线方式</li>
<li>自动离线方式</li>
<li>后处理方式</li></ol>
<p>如果指定 <span class="bold">-x</span> 标志但未指定 <span class="bold">-A</span> 标志，则 <span class="bold">tprof</span> 以实时方式运行。在实时方式下，<span class="bold">tprof</span> 在后台启动 AIX <span class="bold">trace</span> 实用程序并处理所产生的跟踪数据。当被概要分析的程序结束时，<span class="bold">tprof</span> 收集符号名称信息并生成报告。</p>
<a name="wq1046"></a>
<div class="notetitle" id="wq1046">注:</div>
<div class="notebody">此方式不允许对每个 CPU 进行概要分析。</div>
<p>如果指定 <span class="bold">-A</span> 标志带 <span class="bold">-x</span> 标志，则 <span class="bold">tprof</span> 以自动离线方式运行。在此方式下，<span class="bold">tprof</span> 启动 AIX <span class="bold">trace</span> 实用程序，并将跟踪数据记录在一个文件中。一旦跟踪数据收集完成，就收集符号名信息，<span class="bold">tprof</span> 打开跟踪日志文件并处理数据以生成报告。
在此方式下，除了tprof 报告文件，<span class="bold">tprof</span> 生成以下文件：</p>
<ol type="1">
<li><span class="italic">RootString</span>.syms</li>
<li><span class="italic">RootString</span>.trc[-cpuid]</li></ol>
<a name="wq1048"></a>
<div class="notetitle" id="wq1048">注:</div>
<div class="notebody">tprof 使用的所有输入文件和报告文件都被命名为 <span class="italic">RootString.suffix</span>，其中 <span class="italic">RootString</span> 要么用 <span class="bold">-r</span> 指定，要么是用 <span class="bold">-x</span> 指定的程序名。</div>
<p>任何时候 <span class="bold">tprof</span> 命令都可重新处理这些文件来生成概要分析报告。这被称为人工离线方式。<span class="italic">RootString</span><span class="bold">.syms</span> 文件包含符号名称信息，与 <span class="bold">gensyms</span> 命令的输出相似。
<span class="italic">RootString</span><span class="italic">.trc</span><span class="bold"> [-cpuid</span>] 文件是跟踪日志文件。当每个 CPU 跟踪功能打开时，<span class="bold">-cpuid</span> 被添加到名称上。在此情况下，每个文件仅包含来自一个 CPU 的跟踪数据。</p>
<a name="wq1049"></a>
<div class="notetitle" id="wq1049">注:</div>
<div class="notebody">如果 <span class="bold">-c</span> 和 <span class="bold">-A</span> 一起使用，则不生成这两个文件。而是创建了以下两个文件：
<ol type="1">
<li><span class="italic">RootString</span><span class="bold">.csyms</span></li>
<li><span class="italic">RootString</span><span class="bold">.ctrc</span>[ <span class="bold">-cpuid</span> ]</li></ol>
<p>这些文件是 <span class="italic">cooked</span>，即它们是正常跟踪和名称文件的一个预处理版本。<span class="bold">tprof</span> 后处理 cooked 文件更快。</p></div>
<p>如果 <span class="bold">-A</span> 标志和 <span class="bold">-x</span> 标志都未指定，则 <span class="bold">tprof</span> 要么以人工离线方式运行，要么以后处理方式运行。要 <span class="bold">tprof</span>以后处理方式运行，以下文件必须可用：</p>
<ol type="1">
<li><span class="italic">RootString</span><span class="bold">.csyms </span></li>
<li><span class="italic">RootString</span><span class="bold">.ctrc</span>[ <span class="bold">-cpuid</span> ]</li></ol>
<p>当 <span class="bold">tprof</span> 带 <span class="bold">-c</span> 标志（以除了后处理方式以外的任何方式）运行时，就生成了这些文件。要<span class="bold">tprof</span> 以人工离线方式运行，以下文件必须可用：</p>
<ol type="1">
<li><span class="italic">RootString</span><span class="bold">.syms</span></li>
<li><span class="italic">RootString</span><span class="bold">.trc</span> [<span class="bold">-cpuid</span>]</li></ol>
<p>通过用户人工使用 <span class="bold">gensyms</span> 命令和 AIX 跟踪工具，或者通过不带 <span class="bold">-c</span> 标志以自动离线方式运行 <span class="bold">tprof</span> 来生成这些文件。</p>
<a name="wq1053"></a>
<div class="notetitle" id="wq1053">注:</div>
<div class="notebody"><span class="bold">tprof</span> 总是首先查找 <span class="italic">RootString</span><span class="italic">.csyms</span> 和 <span class="italic">RootString</span><span class="bold">.ctrc</span>[<span class="bold">-cpuid</span>]。仅当这些文件不可用时，才查找 <span class="italic">RootString</span><span class="bold">.syms</span> 和 <span class="italic">RootString</span><span class="bold">.trc</span>[<span class="bold">-cpuid</span>]。要阻止 <span class="bold">tprof</span> 查找 <span class="italic">rootstring</span><span class="bold">.csyms </span> 和 <span class="italic">RootString</span><span class="bold">.ctrc</span>[<span class="bold">-cpuid</span>]，也就是说，强制使用人工离线方式，请使用 <span class="bold">-F</span> 标志。</div>
<p><span class="bold">tprof</span> 生成一个名为 <span class="italic">RootString</span><span class="bold">.prof</span> 的报告文件，该文件可以是进程、线程、对象代码和子例程级概要分析报告。该文件可包含以下部分和子节：</p>
<ol type="1">
<li>摘要报告部分
<ol type="a">
<li>按进程名的 CPU 使用情况摘要</li>
<li>按线程（tid）的 CPU 使用情况摘要</li></ol></li>
<li>全局（关于系统中所有进程的执行情况）概要文件部分
<ol type="a">
<li>用户方式例程的 CPU 使用情况</li>
<li>内核例程的 CPU 使用情况</li>
<li>内核扩展的 CPU 使用情况摘要</li>
<li>每个内核扩展的子例程的 CPU 使用情况。</li>
<li>共享库的 CPU 使用情况摘要</li>
<li>每个共享库的子例程的 CPU 使用情况。</li>
<li>每个 JAVA 类的 CPU 使用情况。</li>
<li>每个 JAVA 类的每个 JAVA 方法的 CPU 使用情况。</li></ol></li>
<li>进程和线程级概要分析部分（每个进程或线程为一个部分）
<ol type="a">
<li>适用于本进程／线程的用户方式例程的 CPU 使用情况</li>
<li>适用于本进程／线程的内核例程的 CPU 使用情况</li>
<li>适用于本进程／线程的内核扩展的 CPU 使用情况摘要。</li>
<li>适用于本进程／线程的每个内核扩展的子例程的 CPU 使用情况。</li>
<li>适用于本进程／线程的共享库的 CPU 使用情况摘要。</li>
<li>适用于本进程／线程的每个共享库的子例程的 CPU 使用情况。</li>
<li>适用于本进程／线程的每个 JAVA 类的 CPU 使用情况。</li>
<li>适用于本进程／线程的每个 JAVA 类的 JAVA 方法的 CPU 使用情况。</li></ol></li></ol>
<p>摘要报告部分总是在 <span class="italic">RootString</span><span class="bold">.prof </span> 报告文件中。基于概要分析标志，全局概要分析部分的各个子节可被打开和关闭：</p>
<ul>
<li><span class="bold">-u</span> 打开子节 a</li>
<li><span class="bold">-k</span> 打开子节 b</li>
<li><span class="bold">-e</span> 打开子节 c 和 d</li>
<li><span class="bold">-s</span> 打开子节 e 和 f</li>
<li><span class="bold">-j </span>打开子节 g 和 h</li></ul>
<p>进程和线程级概要分析部分是为用 <span class="bold">-p</span>、<span class="bold">-P</span> 和 <span class="bold">-t</span> 标志选择的进程和线程创建的。存在于每个进程的每个线程的每个部分中的子节等同于存在于全局部分中的子节，使用概要分析标志（<span class="bold">-u</span>、<span class="bold">-s</span>、<span class="bold">-k</span>、<span class="bold">-e</span>、<span class="bold">-j</span>）来选择这些子节。</p>
<p>当用 <span class="bold">-C</span> 标志调用时，<span class="bold">tprof</span> 也有选择地生成每个 CPU 的概要分析报告（每个 CPU 生成一个概要分析报告）。生成的 <span class="bold">tprof</span> 报告有相同的结构，用约定的规则给它命名：<span class="italic">RootString</span><span class="bold">.prof</span>[<span class="bold">-cpuid</span>]。</p>
<p>如果指定 <span class="bold">-m</span>，则 <span class="bold">tprof</span> 生成微概要分析报告。报告使用以下命名约定：<span class="italic">RootString</span>.<span class="italic">source</span><span class="bold">.mprof</span>，其中 source 是源文件的基本名。如果有多个源文件有相同的基本名，则一个唯一标识它们的号码附加在报告文件名后面，例如，<span class="italic">RootString.Filename</span><span class="bold">.c.mprof-1</span>。微概要分析报告含如下信息：</p>
<ol type="1">
<li>作过注释的源文件的全路径名。</li>
<li>与概要文件样本符合的、含有源文件的所有行号的热行概要文件部分，它按 CPU 的使用情况进行排序。对于每个源行，用一行来报告所有进程所用时间的百分比，其后跟有按单个进程细分的其它行。</li>
<li>一个该源文件中每个功能的源行概要分析部分，包括 CPU 使用情况。该部分包含源行号、CPU 的使用情况和源代码。如果该源文件的 .lst 文件可访问 tprof，则将来自 .lst 文件的指令行和来自源文件的源行集结在一起并适当分配 CPU 的使用。对于每个源文件，这将由指令提供中断。
<p>如果一个源文件不存在
，但有一个 <span class="bold">.lst </span> 文件存在，<span class="bold">tprof</span> 仅显示基于源文件行和来自 .lst 文件的指令的 CPU 使用情况。</p>
<p> 如果这些文件都不存在，但源文件用 <span class="bold">-g</span> 编译过，则 <span class="bold">tprof</span> 可检索源文件行号，并生成一个相似的报告，但源文件代码列丢失。</p>
<a name="wq1059"></a>
<div class="notetitle" id="wq1059">注:</div>
<div class="notebody"> 如果请求每个 CPU 进行概要分析，则微概要分析自动禁用。如果 <span class="bold">.c</span> 文件包含在另一个<span class="bold">.c</span> 文件中，则 <span class="bold">tprof</span> 不能报告正确的源文件行信息。<span class="bold">tprof</span> 不能对 JAVA 类或方法进行微概要分析。</div></li></ol>
<p>以下限制适用于运行 <span class="bold">tprof</span> 命令的非 root 用户：</p>
<ol type="1">
<li><span class="bold">Tprof</span> 将不能验证正在运行的内核与 <span class="bold">/unix</span> 文件相同。这就意味着即使显示警告消息，在多数情况下，正在运行的内核与 <span class="bold">/unix</span> 也是相同的，因此数据应该准确。</li>
<li>当由非 root 用户运行 <span class="bold">gennames</span> 时，给出与限制 #1（以上所述）相同的警告，并标记 <span class="bold">gennames</span> 文件。如果在脱机方式下运行 <span class="bold">tprof</span>，则 <span class="bold">gennames</span> 文件将 <span class="bold">tprof</span> 标记为未验证内核。</li>
<li><span class="bold">tprof</span> 将不能打开并读没有设置读许可权的文件上的符号。一些专用、共享库不具有读许可权，而一些内核扩展不可读。</li></ol>
<a name="wq1061"></a>
<h4 id="wq1061">概要分析的准确性</h4>
<p>解析 CPU 活动的程度取决于获得的样本数目以及<span class="italic">热点</span>的程度。当一个带有几个热点的程序可用相对较少的样本进行概要分析时，程序的较少执行的部分在概要分析报告中不可见，除非获得更多的样本。在用户程序运行少于一分钟的情况下，要在评估中获得高可信度的分辨率可能不够。</p>
<p>一个简单的方案是重复执行用户程序或脚本直到达到所需的分辨率。程序运行时间越长，概要分析分辨率就越高。如果你怀疑概要分析的准确度，运行 <span class="bold">tprof</span> 命令几次即可，然后比较所产生的概要分析文件。</p>
<a name="wq1062"></a>
<h4 id="wq1062">tprof 对 prof 和 gprof 之间的比较</h4>
<p>在这三个命令之间最重要区别是 <span class="bold">tprof</span> 收集数据而不会影响被概要分析的程序的执行时间，而且除了生成微概要分析报告以外，无需重新编译就可以处理已实现优化和分解的二进制文件。
<span class="bold">gprof</span> 和 <span class="bold">prof</span> 都没有微概要分析的能力，也不能处理已进行优化或分解的二进制文件（它们需要专门编译标志），而且重要的是在执行期间会产生程序执行降速。</p>
<p><span class="bold">prof</span> 和 <span class="bold">gprof</span> 工具都是标准的，是许多 UNIX 系统（包括此操作系统）上受支持的概要分析工具。<span class="bold">prof</span> 和 <span class="bold">gprof</span> 提供了子程序概要分析功能，以及每个子程序被调用的次数的精确计数。<span class="bold">gprof</span> 命令也提供了一个非常有用的<span class="italic">调用图</span>，显示每个子程序被特定父程序调用的次数和每个子程序调用其子的次数。<span class="bold">tprof</span> 命令既不提供子程序调用计数，也不提供调用图信息。</p>
<p>像 <span class="bold">tprof</span> 命令一样，<span class="bold">prof</span> 和 <span class="bold">gprof</span> 命令都通过采样用户程序的程序计数器来获取每个子程序的 CPU 消耗量估计。</p>
<p><span class="bold">tprof</span> 收集整个系统的 CPU 的使用信息，而 <span class="bold">prof</span> 和 <span class="bold">gprof</span> 仅收集单个程序和仅在用户方式下所花时间的概要分析信息。<span class="bold">tprof</span> 也提供已概要分析的用户程序执行期间所有活动进程的摘要以及完全支持库和内核方式概要分析的摘要。</p>
<p><span class="bold">tprof</span> 支持 JAVA 应用程序的概要分析，而 <span class="bold">prof</span> 和 <span class="bold">gprof</span> 不支持。</p>
<a name="wq1063"></a>
<h3 id="wq1063">标志</h3>
<a name="wq1064"></a>
<table id="wq1064" width="100%" summary="" border="0" frame="void" rules="none">
<tbody valign="top">
<tr>
<td width="24%">
<a id="newtprof-upa" name="newtprof-upa"></a><span class="bold">-A </span> {<span class="bold">all</span> | <span class="italic">CPUList</span> }</td>
<td width="75%">打开自动离线方式。无参数则关闭每个 CPU 跟踪程序。<span class="bold">all</span> 启用所有 CPU 跟踪程序。<span class="italic">CPUList</span> 是一个用逗号分隔的要被跟踪的 CPU 标识列表。</td>
</tr>
<tr>
<td>
<a id="newtprof-c" name="newtprof-c"></a><span class="bold">-c </span></td>
<td>打开 cooked 文件的生成。</td>
</tr>
<tr>
<td>
<a id="newtprof-upc" name="newtprof-upc"></a><span class="bold">-C all</span> | <span class="italic">CPUList</span></td>
<td>打开每个 CPU 概要分析功能。指定 <span class="bold">all</span> 来生成所有 CPU 的概要分析报告。如果用列表 <span class="italic">CPUlist</span>，则 CPU 的数目应用逗号隔开（如，0,1,2）。
<a name="wq1065"></a>
<div class="notetitle" id="wq1065">注:</div>
<div class="notebody">仅当每个 CPU 跟踪程序要么在自动离线方式下打开，要么在人工离线方式下使用的时候，每个 CPU 概要分析才可能进行。而在在线方式下，则完全不可能。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-d" name="newtprof-d"></a><span class="bold">-d </span></td>
<td>打开延时跟踪方式，该方式延时数据收集直到 <span class="bold">trcon</span> 被调用为止。</td>
</tr>
<tr>
<td>
<a id="newtprof-upd" name="newtprof-upd"></a><span class="bold">-D </span></td>
<td>打开详细概要分析功能，它通过每个子例程中的偏移指令显示 CPU 使用情况。</td>
</tr>
<tr>
<td>
<a id="newtprof-e" name="newtprof-e"></a><span class="bold">-e</span></td>
<td>打开内核扩展概要分析功能。</td>
</tr>
<tr>
<td>
<a id="newtprof-upf" name="newtprof-upf"></a><span class="bold">-F</span></td>
<td>覆盖 cooked 文件（如果存在）。如果没有用 <span class="bold">-x</span> 标志使用的话，则强制使用人工离线方式。</td>
</tr>
<tr>
<td>
<a id="newtprof-j" name="newtprof-j"></a><span class="bold">-j</span></td>
<td>打开 JAVA 类和方法概要分析功能。</td>
</tr>
<tr>
<td>
<a id="newtprof-k" name="newtprof-k"></a><span class="bold">-k</span></td>
<td>启用内核概要分析功能。</td>
</tr>
<tr>
<td>
<a id="newtprof-l" name="newtprof-l"></a><span class="bold">-l</span></td>
<td>启用长文件名报告。缺省情况下，如果子程序、程序和源文件名不适合概要分析报告中的可用空间，则 <span class="bold">tprof</span> 截断这些名称。该标志禁用截取。</td>
</tr>
<tr>
<td>
<a id="newtprof-m" name="newtprof-m"></a><span class="bold">-m</span> <span class="italic">ObjectsList</span></td>
<td>启用由用逗号分隔的列表 <span class="italic">Objectlist</span> 指定的对象的微概要分析功能。可执行文件、共享库以及内核扩展都可进行微概要分析。给库和内核扩展指定归档名。
<a name="wq1066"></a>
<div class="notelisttitle" id="wq1066">注:</div>
<ol type="1">
<li>要启用程序的微概要分析功能，必须打开用户方式概要分析功能（<span class="bold">-u</span>）。</li>
<li>要启用共享库的微概要分析功能，必须打开共享库概要分析功能（<span class="bold">-s</span>）。</li>
<li>要启用内核扩展例程微概要分析功能，必须打开内核扩展例程概要分析功能（<span class="bold">-e</span>）。</li>
</ol></td>
</tr>
<tr>
<td>
<a id="newtprof-upm" name="newtprof-upm"></a><span class="bold">-M</span> <span class="italic">PathList</span></td>
<td>指定源路径列表。<span class="italic">PathList</span> 是一个用冒号隔开的路径列表，搜索该列表以查找微概要分析所需的源文件和 <span class="bold">.lst</span> 文件。
<a name="wq1068"></a>
<div class="notetitle" id="wq1068">注:</div>
<div class="notebody">缺省情况下，源路径列表是对象搜索路径列表。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-p" name="newtprof-p"></a><span class="bold">-p</span> <span class="italic">ProcessList</span></td>
<td>启用在 <span class="italic">ProcessList</span> 中指定的进程名的进程级概要分析功能。<span class="italic">ProcessList</span> 是一个用逗号分隔的进程名列表
<a name="wq1069"></a>
<div class="notetitle" id="wq1069">注:</div>
<div class="notebody">仅当至少有一个概要分析方式（<span class="bold">-u</span>、<span class="bold">-s</span>、<span class="bold">-k</span>、<span class="bold">-e</span> 或 <span class="bold">-j</span>）被打开，进程级概要分析才启用。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-upp" name="newtprof-upp"></a><span class="bold">-P</span> { <span class="bold">all</span> | <span class="italic">PIDList</span> }</td>
<td>启用遇到的<span class="bold">所有</span>进程或 <span class="italic">PIDList</span> 指定进程的进程级概要分析功能。
<span class="italic">PIDList</span> 是一个用逗号分隔的进程标识列表。
<a name="wq1070"></a>
<div class="notetitle" id="wq1070">注:</div>
<div class="notebody">仅当至少有一个概要分析方式（<span class="bold">-u</span>、<span class="bold">-s</span>、<span class="bold">-k</span>、<span class="bold">-e</span> 或 <span class="bold">-j</span>）被打开，进程级概要分析才启用。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-r" name="newtprof-r"></a><span class="bold">-r</span> <span class="italic">RootString</span></td>
<td>指定 <span class="italic">RootString</span>。所有 <span class="bold">tprof</span> 输入和报告文件都有 <span class="italic">RootString</span>.<span class="italic">suffix</span> 格式的名称。
<a name="wq1071"></a>
<div class="notetitle" id="wq1071">注:</div>
<div class="notebody"> 如果未指定 <span class="bold">-r</span>，则 <span class="italic">RootString</span> 缺省为 <span class="bold">-x</span> 标志指定的程序名。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-s" name="newtprof-s"></a><span class="bold">-s</span></td>
<td>启用共享库概要分析功能。</td>
</tr>
<tr>
<td>
<a id="newtprof-ups" name="newtprof-ups"></a><span class="bold">-S</span> <span class="italic">PathList</span></td>
<td>指定对象搜索 <span class="italic">PathList</span>。<span class="italic">PathList</span> 是一个用冒号隔开的路径列表，搜索该列表以查找可执行文件、共享库和内核扩展。
<a name="wq1072"></a>
<div class="notetitle" id="wq1072">注:</div>
<div class="notebody">缺省对象搜索 <span class="italic">PathList</span> 是环境路径列表（<span class="bold">$PATH</span>）。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-t" name="newtprof-t"></a><span class="bold">-t</span></td>
<td>启用线程级概要分析功能。
<a name="wq1073"></a>
<div class="notetitle" id="wq1073">注:</div>
<div class="notebody">如果 <span class="bold">-p</span> 或 <span class="bold">-P</span> 没有带 <span class="bold">-t</span> 标志一起指定，则 <span class="bold">-t</span> 等价于 <span class="bold">-P all -t</span>。否则，为选定的进程启用线程级报告。仅当至少有一个概要分析方式（<span class="bold">-u</span>、<span class="bold">-s</span>、<span class="bold">-k</span>、<span class="bold">-e</span>、<span class="bold">-j</span>）启用时，线程级概要分析才启用。</div>.</td>
</tr>
<tr>
<td>
<a id="newtprof-upt" name="newtprof-upt"></a><span class="bold">-T</span> <span class="italic">BufferSize</span></td>
<td>指定跟踪 <span class="italic">BufferSize</span>。
<a name="wq1074"></a>
<div class="notetitle" id="wq1074">注:</div>
<div class="notebody">该标志表示仅在实时方式或自动离线方式下有效。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-u" name="newtprof-u"></a><span class="bold">-u</span></td>
<td>启用用户方式概要分析功能。</td>
</tr>
<tr>
<td>
<a id="newtprof-v" name="newtprof-v"></a><span class="bold">-v</span></td>
<td>启用详细方式。</td>
</tr>
<tr>
<td>
<a id="newtprof-upv" name="newtprof-upv"></a><span class="bold">-V</span> <span class="italic">File</span></td>
<td>将详细输出存储在指定的 <span class="italic">File</span> 中。</td>
</tr>
<tr>
<td>
<a id="newtprof-x" name="newtprof-x"></a><span class="bold">-x</span><span class="italic"> Program</span></td>
<td>指定将由 <span class="bold">tprof</span> 执行的程序。当 <span class="italic">Program</span> 完成或用 <span class="bold">trcoff</span> 或 <span class="bold">trcstop</span> 手工停止 <span class="bold">trace</span> 时，停止数据收集
<a name="wq1075"></a>
<div class="notetitle" id="wq1075">注:</div>
<div class="notebody"><span class="bold">-x</span> 标志必须是在 <span class="bold">tprof</span> 中指定的标志列表中的最后一个标志。</div></td>
</tr>
<tr>
<td>
<a id="newtprof-z" name="newtprof-z"></a><span class="bold">-z</span></td>
<td>用先前版本的 <span class="bold">tprof</span> 来启用兼容方式。缺省情况下，CPU 使用情况仅用百分比来报告。当使用 <span class="bold">-z</span> 时，<span class="bold">tprof</span> 也报告滴答数。该标志还在子例程报告中添加“地址”栏和“字节”栏。</td>
</tr>
</tbody>
</table>
<a name="wq1076"></a>
<h3 id="wq1076">示例</h3>
<ol type="1">
<li>基本全局程序和线程级摘要
<pre class="xmp">$ tprof -x sleep 10
2002 年 3月 20 日 星期一 00:39:26  系统：AIX 5.2 节点：dreaming 机器：000671894C00
启动命令 sleep 10
停止跟踪收集。
生成 sleep.prof </pre>
<p>产生的 <span class="bold">sleep.prof</span> 文件仅包含摘要报告部分。</p></li>
<li>带有所有选项的全局概要分析
<pre class="xmp">$ tprof -skeuj -x sleep 10
2002 年 3月 20 日 星期一 00:39:26  系统：AIX 5.2 节点：dreaing 机器：000671894C00
启动命令 sleep 10
停止跟踪收集。
生成 sleep.prof </pre>
<p>产生的 sleep.prof 文件包含摘要报告部分和全局概要分析部分。</p></li>
<li> 单个进程级概要分析  
<pre class="xmp">$ tprof -u -p workload -x workload 
2002 年 3月 20 日 星期一 00:39:26  系统：AIX 5.2 节点：dreaing 机器：000671894C00
启动命令 workload，停止跟踪收集。
生成 workload.prof  </pre>
<p>产生的 <span class="bold">workload.prof</span> 文件包含摘要报告和全局用户方式概要分析部分，以及仅包含一个用户方式概要分析子节的进程‘workload’的一个进程级概要分析部分。</p></li>
<li>多个进程级概要分析  
<pre class="xmp">$ tprof -se -p send,receive -x startall 
2002 年 3月 20 日 星期一 00:39:26  系统：AIX 5.2 节点：dreaming 机器：000671894C00
启动命令 startall
停止跟踪收集。
生成 startall.prof</pre>
<p>产生的 <span class="bold">startall.prof</span> 文件包含摘要报告、全局共享库方式概要分析、全局内核扩展例程概要分析部分以及两个进程级概要分析部分：一个为进程‘send’，一个为进程‘receive’。每个进程级部分包含两个子节：一个为共享库概要分析信息，一个为内核扩展概要分析信息。</p></li>
<li>微概要分析  
<pre class="xmp">$ tprof -m ./tcalc -u -x ./tcalc 
2002 年 3月 20 日 星期一 00:47:09  系统：AIX 5.2 节点：dreaming 机器：000671894C00
启动命令 ./tcalc
停止跟踪收集。
生成 tcalc.prof
生成 tcalc.tcalc.c.mprof</pre>
<p>产生的 <span class="bold">tcalc.prof</span> 文件包含摘要报告和全局用户方式概要分析部分。
产生的 <span class="bold">tcalc.tcalc.c.mprof</span> 文件包含微概要分析报告。</p></li>
<li>自动离线方式  
<pre class="xmp">tprof -c -A all -x sleep 10 
启动命令 sleep 10
停止跟踪收集。
2002 年 3 月 20 日，星期一 00:52:52
系统：AIX 5.2 节点：dreaming 机器：000671894C00
生成 sleep.ctrc
生成 sleep.csyms
生成 sleep.prof </pre>
<p>产生的 <span class="bold">sleep.prof</span> 文件只有一个摘要报告部分，而两个 cooked 文件准备进行重新后处理。</p></li></ol>
<a name="e0f0aef961meki"></a>
<h3 id="e0f0aef961meki">消息</h3>
<a name="f915cf8046mart"></a>
<p id="f915cf8046mart">如果您的系统显示如下消息：</p>
<p></p>
<pre class="xmp">/dev/systrace：设备忙或 trcon：TRCON：无此设备 </pre>
<a name="f915cf8266mart"></a>
<p id="f915cf8266mart">这表示 <span class="bold">trace</span> 工具正在使用。输入 <tt>trcstop</tt> 停止跟踪后，停止程序并再试一次。</p>
<a name="e0f0af0252meki"></a>
<h3 id="e0f0af0252meki">相关信息</h3>
<p><span class="bold">gensyms</span> 命令、<a href="http://study.chyangwa.com/IT/AIX/aixcmds5/cmds/aixcmds2/gprof.htm"><span class="bold">gprof</span></a> 命令、<a href="http://study.chyangwa.com/IT/AIX/aixcmds5/cmds/aixcmds4/prof.htm"><span class="bold">prof</span></a> 命令、<a href="stripnm.htm#reg3i1e1doug"><span class="bold">stripnm</span></a> 命令和 <a href="trace.htm#a236y977a8"><span class="bold">trace</span></a> 守护进程。</p>
<FONT COLOR="#A62A2A"></FONT><p></p>
   <center>
<B>[ <a href="tprof.htm#Top_Of_Page">页的顶部</a> | <a href="touch.htm">上一页</a> | <a href="tput.htm">下一页</a> | <a href="mastertoc.htm#mtoc">目录</a> | <a href="aixcmds502.htm#wq1667">索引</a> | <A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>资料库</B></A> |
<A HREF="notices.htm"><B>法律条款</B></A> |
<A HREF="file:///C|/download/www16.boulder.ibm.com/cgi-bin/ds_form@lang=zh_CN&viewset=AIX" TARGET="_top"><B>搜索</B></A> ]</B>
</center>

<a id="Bot_Of_Page" name="Bot_Of_Page"></a>
</body>
</html>
